/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.4.9
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientEvents } from '../models';
// @ts-ignore
import { ClientEventsRequest } from '../models';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sends logs to the Clickhouse if it is connected
         * @summary Method saves logs from a client on the server
         * @param {ClientEventsRequest} clientEventsRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCreate: async (clientEventsRequest: ClientEventsRequest, xOrganization?: string, org?: string, orgId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientEventsRequest' is not null or undefined
            assertParamExists('eventsCreate', 'clientEventsRequest', clientEventsRequest)
            const localVarPath = `/api/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientEventsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Recieve logs from the server
         * @summary Method returns csv log file 
         * @param {EventsListActionEnum} [action] Used to start downloading process after annotation file had been created
         * @param {string} [filename] Desired output file name
         * @param {string} [from] Filter events after the datetime. If no \&#39;from\&#39; or \&#39;to\&#39; parameters are passed, the last 30 days will be set.
         * @param {number} [jobId] Filter events by job ID
         * @param {number} [orgId] Filter events by organization ID
         * @param {number} [projectId] Filter events by project ID
         * @param {string} [queryId] ID of query request that need to check or download
         * @param {number} [taskId] Filter events by task ID
         * @param {string} [to] Filter events before the datetime. If no \&#39;from\&#39; or \&#39;to\&#39; parameters are passed, the last 30 days will be set.
         * @param {number} [userId] Filter events by user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsList: async (action?: EventsListActionEnum, filename?: string, from?: string, jobId?: number, orgId?: number, projectId?: number, queryId?: string, taskId?: number, to?: string, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (queryId !== undefined) {
                localVarQueryParameter['query_id'] = queryId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Sends logs to the Clickhouse if it is connected
         * @summary Method saves logs from a client on the server
         * @param {ClientEventsRequest} clientEventsRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCreate(clientEventsRequest: ClientEventsRequest, xOrganization?: string, org?: string, orgId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientEvents>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsCreate(clientEventsRequest, xOrganization, org, orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Recieve logs from the server
         * @summary Method returns csv log file 
         * @param {EventsListActionEnum} [action] Used to start downloading process after annotation file had been created
         * @param {string} [filename] Desired output file name
         * @param {string} [from] Filter events after the datetime. If no \&#39;from\&#39; or \&#39;to\&#39; parameters are passed, the last 30 days will be set.
         * @param {number} [jobId] Filter events by job ID
         * @param {number} [orgId] Filter events by organization ID
         * @param {number} [projectId] Filter events by project ID
         * @param {string} [queryId] ID of query request that need to check or download
         * @param {number} [taskId] Filter events by task ID
         * @param {string} [to] Filter events before the datetime. If no \&#39;from\&#39; or \&#39;to\&#39; parameters are passed, the last 30 days will be set.
         * @param {number} [userId] Filter events by user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsList(action?: EventsListActionEnum, filename?: string, from?: string, jobId?: number, orgId?: number, projectId?: number, queryId?: string, taskId?: number, to?: string, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsList(action, filename, from, jobId, orgId, projectId, queryId, taskId, to, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * Sends logs to the Clickhouse if it is connected
         * @summary Method saves logs from a client on the server
         * @param {EventsApiEventsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCreate(requestParameters: EventsApiEventsCreateRequest, options?: AxiosRequestConfig): AxiosPromise<ClientEvents> {
            return localVarFp.eventsCreate(requestParameters.clientEventsRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * Recieve logs from the server
         * @summary Method returns csv log file 
         * @param {EventsApiEventsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsList(requestParameters: EventsApiEventsListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventsList(requestParameters.action, requestParameters.filename, requestParameters.from, requestParameters.jobId, requestParameters.orgId, requestParameters.projectId, requestParameters.queryId, requestParameters.taskId, requestParameters.to, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for eventsCreate operation in EventsApi.
 * @export
 * @interface EventsApiEventsCreateRequest
 */
export interface EventsApiEventsCreateRequest {
    /**
     * 
     * @type {ClientEventsRequest}
     * @memberof EventsApiEventsCreate
     */
    readonly clientEventsRequest: ClientEventsRequest

    /**
     * Organization unique slug
     * @type {string}
     * @memberof EventsApiEventsCreate
     */
    readonly xOrganization?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof EventsApiEventsCreate
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof EventsApiEventsCreate
     */
    readonly orgId?: number
}

/**
 * Request parameters for eventsList operation in EventsApi.
 * @export
 * @interface EventsApiEventsListRequest
 */
export interface EventsApiEventsListRequest {
    /**
     * Used to start downloading process after annotation file had been created
     * @type {'download'}
     * @memberof EventsApiEventsList
     */
    readonly action?: EventsListActionEnum

    /**
     * Desired output file name
     * @type {string}
     * @memberof EventsApiEventsList
     */
    readonly filename?: string

    /**
     * Filter events after the datetime. If no \&#39;from\&#39; or \&#39;to\&#39; parameters are passed, the last 30 days will be set.
     * @type {string}
     * @memberof EventsApiEventsList
     */
    readonly from?: string

    /**
     * Filter events by job ID
     * @type {number}
     * @memberof EventsApiEventsList
     */
    readonly jobId?: number

    /**
     * Filter events by organization ID
     * @type {number}
     * @memberof EventsApiEventsList
     */
    readonly orgId?: number

    /**
     * Filter events by project ID
     * @type {number}
     * @memberof EventsApiEventsList
     */
    readonly projectId?: number

    /**
     * ID of query request that need to check or download
     * @type {string}
     * @memberof EventsApiEventsList
     */
    readonly queryId?: string

    /**
     * Filter events by task ID
     * @type {number}
     * @memberof EventsApiEventsList
     */
    readonly taskId?: number

    /**
     * Filter events before the datetime. If no \&#39;from\&#39; or \&#39;to\&#39; parameters are passed, the last 30 days will be set.
     * @type {string}
     * @memberof EventsApiEventsList
     */
    readonly to?: string

    /**
     * Filter events by user ID
     * @type {number}
     * @memberof EventsApiEventsList
     */
    readonly userId?: number
}

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * Sends logs to the Clickhouse if it is connected
     * @summary Method saves logs from a client on the server
     * @param {EventsApiEventsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsCreate(requestParameters: EventsApiEventsCreateRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsCreate(requestParameters.clientEventsRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Recieve logs from the server
     * @summary Method returns csv log file 
     * @param {EventsApiEventsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsList(requestParameters: EventsApiEventsListRequest = {}, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsList(requestParameters.action, requestParameters.filename, requestParameters.from, requestParameters.jobId, requestParameters.orgId, requestParameters.projectId, requestParameters.queryId, requestParameters.taskId, requestParameters.to, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const EventsListActionEnum = {
    Download: 'download'
} as const;
export type EventsListActionEnum = typeof EventsListActionEnum[keyof typeof EventsListActionEnum];
