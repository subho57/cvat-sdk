/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.30.0
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PaginatedRequestList } from '../models';
// @ts-ignore
import type { Request } from '../models';
/**
 * RequestsApi - axios parameter creator
 * @export
 */
export const RequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel request
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsCreateCancel: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('requestsCreateCancel', 'id', id)
            const localVarPath = `/api/requests/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List requests
         * @param {RequestsListActionEnum} [action] A simple equality filter for the action field
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;status\&#39;, \&#39;project_id\&#39;, \&#39;task_id\&#39;, \&#39;job_id\&#39;, \&#39;action\&#39;, \&#39;target\&#39;, \&#39;subresource\&#39;, \&#39;format\&#39;].
         * @param {string} [format] A simple equality filter for the format field
         * @param {number} [jobId] A simple equality filter for the job_id field
         * @param {string} [org] A simple equality filter for the org field
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [projectId] A simple equality filter for the project_id field
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;created_date\&#39;, \&#39;status\&#39;, \&#39;action\&#39;]
         * @param {RequestsListStatusEnum} [status] A simple equality filter for the status field
         * @param {RequestsListSubresourceEnum} [subresource] A simple equality filter for the subresource field
         * @param {RequestsListTargetEnum} [target] A simple equality filter for the target field
         * @param {number} [taskId] A simple equality filter for the task_id field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsList: async (action?: RequestsListActionEnum, filter?: string, format?: string, jobId?: number, org?: string, page?: number, pageSize?: number, projectId?: number, sort?: string, status?: RequestsListStatusEnum, subresource?: RequestsListSubresourceEnum, target?: RequestsListTargetEnum, taskId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (subresource !== undefined) {
                localVarQueryParameter['subresource'] = subresource;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get request details
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('requestsRetrieve', 'id', id)
            const localVarPath = `/api/requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestsApi - functional programming interface
 * @export
 */
export const RequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Cancel request
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsCreateCancel(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsCreateCancel(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestsApi.requestsCreateCancel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List requests
         * @param {RequestsListActionEnum} [action] A simple equality filter for the action field
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;status\&#39;, \&#39;project_id\&#39;, \&#39;task_id\&#39;, \&#39;job_id\&#39;, \&#39;action\&#39;, \&#39;target\&#39;, \&#39;subresource\&#39;, \&#39;format\&#39;].
         * @param {string} [format] A simple equality filter for the format field
         * @param {number} [jobId] A simple equality filter for the job_id field
         * @param {string} [org] A simple equality filter for the org field
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [projectId] A simple equality filter for the project_id field
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;created_date\&#39;, \&#39;status\&#39;, \&#39;action\&#39;]
         * @param {RequestsListStatusEnum} [status] A simple equality filter for the status field
         * @param {RequestsListSubresourceEnum} [subresource] A simple equality filter for the subresource field
         * @param {RequestsListTargetEnum} [target] A simple equality filter for the target field
         * @param {number} [taskId] A simple equality filter for the task_id field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsList(action?: RequestsListActionEnum, filter?: string, format?: string, jobId?: number, org?: string, page?: number, pageSize?: number, projectId?: number, sort?: string, status?: RequestsListStatusEnum, subresource?: RequestsListSubresourceEnum, target?: RequestsListTargetEnum, taskId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRequestList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsList(action, filter, format, jobId, org, page, pageSize, projectId, sort, status, subresource, target, taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestsApi.requestsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get request details
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Request>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestsApi.requestsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RequestsApi - factory interface
 * @export
 */
export const RequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequestsApiFp(configuration)
    return {
        /**
         * 
         * @summary Cancel request
         * @param {RequestsApiRequestsCreateCancelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsCreateCancel(requestParameters: RequestsApiRequestsCreateCancelRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.requestsCreateCancel(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List requests
         * @param {RequestsApiRequestsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsList(requestParameters: RequestsApiRequestsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedRequestList> {
            return localVarFp.requestsList(requestParameters.action, requestParameters.filter, requestParameters.format, requestParameters.jobId, requestParameters.org, requestParameters.page, requestParameters.pageSize, requestParameters.projectId, requestParameters.sort, requestParameters.status, requestParameters.subresource, requestParameters.target, requestParameters.taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get request details
         * @param {RequestsApiRequestsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRetrieve(requestParameters: RequestsApiRequestsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Request> {
            return localVarFp.requestsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for requestsCreateCancel operation in RequestsApi.
 * @export
 * @interface RequestsApiRequestsCreateCancelRequest
 */
export interface RequestsApiRequestsCreateCancelRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestsApiRequestsCreateCancel
     */
    readonly id: string
}

/**
 * Request parameters for requestsList operation in RequestsApi.
 * @export
 * @interface RequestsApiRequestsListRequest
 */
export interface RequestsApiRequestsListRequest {
    /**
     * A simple equality filter for the action field
     * @type {'autoannotate' | 'create' | 'import' | 'export'}
     * @memberof RequestsApiRequestsList
     */
    readonly action?: RequestsListActionEnum

    /**
     *  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;status\&#39;, \&#39;project_id\&#39;, \&#39;task_id\&#39;, \&#39;job_id\&#39;, \&#39;action\&#39;, \&#39;target\&#39;, \&#39;subresource\&#39;, \&#39;format\&#39;].
     * @type {string}
     * @memberof RequestsApiRequestsList
     */
    readonly filter?: string

    /**
     * A simple equality filter for the format field
     * @type {string}
     * @memberof RequestsApiRequestsList
     */
    readonly format?: string

    /**
     * A simple equality filter for the job_id field
     * @type {number}
     * @memberof RequestsApiRequestsList
     */
    readonly jobId?: number

    /**
     * A simple equality filter for the org field
     * @type {string}
     * @memberof RequestsApiRequestsList
     */
    readonly org?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof RequestsApiRequestsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof RequestsApiRequestsList
     */
    readonly pageSize?: number

    /**
     * A simple equality filter for the project_id field
     * @type {number}
     * @memberof RequestsApiRequestsList
     */
    readonly projectId?: number

    /**
     * Which field to use when ordering the results. Available ordering_fields: [\&#39;created_date\&#39;, \&#39;status\&#39;, \&#39;action\&#39;]
     * @type {string}
     * @memberof RequestsApiRequestsList
     */
    readonly sort?: string

    /**
     * A simple equality filter for the status field
     * @type {'queued' | 'started' | 'failed' | 'finished'}
     * @memberof RequestsApiRequestsList
     */
    readonly status?: RequestsListStatusEnum

    /**
     * A simple equality filter for the subresource field
     * @type {'annotations' | 'dataset' | 'backup'}
     * @memberof RequestsApiRequestsList
     */
    readonly subresource?: RequestsListSubresourceEnum

    /**
     * A simple equality filter for the target field
     * @type {'project' | 'task' | 'job'}
     * @memberof RequestsApiRequestsList
     */
    readonly target?: RequestsListTargetEnum

    /**
     * A simple equality filter for the task_id field
     * @type {number}
     * @memberof RequestsApiRequestsList
     */
    readonly taskId?: number
}

/**
 * Request parameters for requestsRetrieve operation in RequestsApi.
 * @export
 * @interface RequestsApiRequestsRetrieveRequest
 */
export interface RequestsApiRequestsRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestsApiRequestsRetrieve
     */
    readonly id: string
}

/**
 * RequestsApi - object-oriented interface
 * @export
 * @class RequestsApi
 * @extends {BaseAPI}
 */
export class RequestsApi extends BaseAPI {
    /**
     * 
     * @summary Cancel request
     * @param {RequestsApiRequestsCreateCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsCreateCancel(requestParameters: RequestsApiRequestsCreateCancelRequest, options?: RawAxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsCreateCancel(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List requests
     * @param {RequestsApiRequestsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsList(requestParameters: RequestsApiRequestsListRequest = {}, options?: RawAxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsList(requestParameters.action, requestParameters.filter, requestParameters.format, requestParameters.jobId, requestParameters.org, requestParameters.page, requestParameters.pageSize, requestParameters.projectId, requestParameters.sort, requestParameters.status, requestParameters.subresource, requestParameters.target, requestParameters.taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get request details
     * @param {RequestsApiRequestsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRetrieve(requestParameters: RequestsApiRequestsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const RequestsListActionEnum = {
    Autoannotate: 'autoannotate',
    Create: 'create',
    Import: 'import',
    Export: 'export'
} as const;
export type RequestsListActionEnum = typeof RequestsListActionEnum[keyof typeof RequestsListActionEnum];
/**
 * @export
 */
export const RequestsListStatusEnum = {
    Queued: 'queued',
    Started: 'started',
    Failed: 'failed',
    Finished: 'finished'
} as const;
export type RequestsListStatusEnum = typeof RequestsListStatusEnum[keyof typeof RequestsListStatusEnum];
/**
 * @export
 */
export const RequestsListSubresourceEnum = {
    Annotations: 'annotations',
    Dataset: 'dataset',
    Backup: 'backup'
} as const;
export type RequestsListSubresourceEnum = typeof RequestsListSubresourceEnum[keyof typeof RequestsListSubresourceEnum];
/**
 * @export
 */
export const RequestsListTargetEnum = {
    Project: 'project',
    Task: 'task',
    Job: 'job'
} as const;
export type RequestsListTargetEnum = typeof RequestsListTargetEnum[keyof typeof RequestsListTargetEnum];
