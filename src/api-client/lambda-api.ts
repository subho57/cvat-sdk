/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.5.1
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FunctionCall } from '../models';
// @ts-ignore
import { FunctionCallRequest } from '../models';
// @ts-ignore
import { OnlineFunctionCallRequest } from '../models';
/**
 * LambdaApi - axios parameter creator
 * @export
 */
export const LambdaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows to execute a function for immediate computation.  Intended for short-lived executions, useful for interactive calls.  When executed for interactive annotation, the job id must be specified in the \'job\' input field. The task id is not required in this case, but if it is specified, it must match the job task id. 
         * @param {string} funcId 
         * @param {OnlineFunctionCallRequest} [onlineFunctionCallRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaCreateFunctions: async (funcId: string, onlineFunctionCallRequest?: OnlineFunctionCallRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'funcId' is not null or undefined
            assertParamExists('lambdaCreateFunctions', 'funcId', funcId)
            const localVarPath = `/api/lambda/functions/{func_id}`
                .replace(`{${"func_id"}}`, encodeURIComponent(String(funcId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(onlineFunctionCallRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method calls the function
         * @param {FunctionCallRequest} functionCallRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaCreateRequests: async (functionCallRequest: FunctionCallRequest, xOrganization?: string, org?: string, orgId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionCallRequest' is not null or undefined
            assertParamExists('lambdaCreateRequests', 'functionCallRequest', functionCallRequest)
            const localVarPath = `/api/lambda/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(functionCallRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns a list of functions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaListFunctions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/lambda/functions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns a list of requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaListRequests: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/lambda/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns the information about the function
         * @param {string} funcId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaRetrieveFunctions: async (funcId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'funcId' is not null or undefined
            assertParamExists('lambdaRetrieveFunctions', 'funcId', funcId)
            const localVarPath = `/api/lambda/functions/{func_id}`
                .replace(`{${"func_id"}}`, encodeURIComponent(String(funcId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns the status of the request
         * @param {string} id Request id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaRetrieveRequests: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('lambdaRetrieveRequests', 'id', id)
            const localVarPath = `/api/lambda/requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LambdaApi - functional programming interface
 * @export
 */
export const LambdaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LambdaApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows to execute a function for immediate computation.  Intended for short-lived executions, useful for interactive calls.  When executed for interactive annotation, the job id must be specified in the \'job\' input field. The task id is not required in this case, but if it is specified, it must match the job task id. 
         * @param {string} funcId 
         * @param {OnlineFunctionCallRequest} [onlineFunctionCallRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lambdaCreateFunctions(funcId: string, onlineFunctionCallRequest?: OnlineFunctionCallRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lambdaCreateFunctions(funcId, onlineFunctionCallRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method calls the function
         * @param {FunctionCallRequest} functionCallRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lambdaCreateRequests(functionCallRequest: FunctionCallRequest, xOrganization?: string, org?: string, orgId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FunctionCall>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lambdaCreateRequests(functionCallRequest, xOrganization, org, orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns a list of functions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lambdaListFunctions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lambdaListFunctions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns a list of requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lambdaListRequests(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FunctionCall>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lambdaListRequests(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns the information about the function
         * @param {string} funcId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lambdaRetrieveFunctions(funcId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lambdaRetrieveFunctions(funcId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns the status of the request
         * @param {string} id Request id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lambdaRetrieveRequests(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FunctionCall>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lambdaRetrieveRequests(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LambdaApi - factory interface
 * @export
 */
export const LambdaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LambdaApiFp(configuration)
    return {
        /**
         * Allows to execute a function for immediate computation.  Intended for short-lived executions, useful for interactive calls.  When executed for interactive annotation, the job id must be specified in the \'job\' input field. The task id is not required in this case, but if it is specified, it must match the job task id. 
         * @param {LambdaApiLambdaCreateFunctionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaCreateFunctions(requestParameters: LambdaApiLambdaCreateFunctionsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.lambdaCreateFunctions(requestParameters.funcId, requestParameters.onlineFunctionCallRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method calls the function
         * @param {LambdaApiLambdaCreateRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaCreateRequests(requestParameters: LambdaApiLambdaCreateRequestsRequest, options?: AxiosRequestConfig): AxiosPromise<FunctionCall> {
            return localVarFp.lambdaCreateRequests(requestParameters.functionCallRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns a list of functions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaListFunctions(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.lambdaListFunctions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns a list of requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaListRequests(options?: AxiosRequestConfig): AxiosPromise<Array<FunctionCall>> {
            return localVarFp.lambdaListRequests(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns the information about the function
         * @param {LambdaApiLambdaRetrieveFunctionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaRetrieveFunctions(requestParameters: LambdaApiLambdaRetrieveFunctionsRequest, options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.lambdaRetrieveFunctions(requestParameters.funcId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns the status of the request
         * @param {LambdaApiLambdaRetrieveRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lambdaRetrieveRequests(requestParameters: LambdaApiLambdaRetrieveRequestsRequest, options?: AxiosRequestConfig): AxiosPromise<FunctionCall> {
            return localVarFp.lambdaRetrieveRequests(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for lambdaCreateFunctions operation in LambdaApi.
 * @export
 * @interface LambdaApiLambdaCreateFunctionsRequest
 */
export interface LambdaApiLambdaCreateFunctionsRequest {
    /**
     * 
     * @type {string}
     * @memberof LambdaApiLambdaCreateFunctions
     */
    readonly funcId: string

    /**
     * 
     * @type {OnlineFunctionCallRequest}
     * @memberof LambdaApiLambdaCreateFunctions
     */
    readonly onlineFunctionCallRequest?: OnlineFunctionCallRequest
}

/**
 * Request parameters for lambdaCreateRequests operation in LambdaApi.
 * @export
 * @interface LambdaApiLambdaCreateRequestsRequest
 */
export interface LambdaApiLambdaCreateRequestsRequest {
    /**
     * 
     * @type {FunctionCallRequest}
     * @memberof LambdaApiLambdaCreateRequests
     */
    readonly functionCallRequest: FunctionCallRequest

    /**
     * Organization unique slug
     * @type {string}
     * @memberof LambdaApiLambdaCreateRequests
     */
    readonly xOrganization?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof LambdaApiLambdaCreateRequests
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof LambdaApiLambdaCreateRequests
     */
    readonly orgId?: number
}

/**
 * Request parameters for lambdaRetrieveFunctions operation in LambdaApi.
 * @export
 * @interface LambdaApiLambdaRetrieveFunctionsRequest
 */
export interface LambdaApiLambdaRetrieveFunctionsRequest {
    /**
     * 
     * @type {string}
     * @memberof LambdaApiLambdaRetrieveFunctions
     */
    readonly funcId: string
}

/**
 * Request parameters for lambdaRetrieveRequests operation in LambdaApi.
 * @export
 * @interface LambdaApiLambdaRetrieveRequestsRequest
 */
export interface LambdaApiLambdaRetrieveRequestsRequest {
    /**
     * Request id
     * @type {string}
     * @memberof LambdaApiLambdaRetrieveRequests
     */
    readonly id: string
}

/**
 * LambdaApi - object-oriented interface
 * @export
 * @class LambdaApi
 * @extends {BaseAPI}
 */
export class LambdaApi extends BaseAPI {
    /**
     * Allows to execute a function for immediate computation.  Intended for short-lived executions, useful for interactive calls.  When executed for interactive annotation, the job id must be specified in the \'job\' input field. The task id is not required in this case, but if it is specified, it must match the job task id. 
     * @param {LambdaApiLambdaCreateFunctionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LambdaApi
     */
    public lambdaCreateFunctions(requestParameters: LambdaApiLambdaCreateFunctionsRequest, options?: AxiosRequestConfig) {
        return LambdaApiFp(this.configuration).lambdaCreateFunctions(requestParameters.funcId, requestParameters.onlineFunctionCallRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method calls the function
     * @param {LambdaApiLambdaCreateRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LambdaApi
     */
    public lambdaCreateRequests(requestParameters: LambdaApiLambdaCreateRequestsRequest, options?: AxiosRequestConfig) {
        return LambdaApiFp(this.configuration).lambdaCreateRequests(requestParameters.functionCallRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns a list of functions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LambdaApi
     */
    public lambdaListFunctions(options?: AxiosRequestConfig) {
        return LambdaApiFp(this.configuration).lambdaListFunctions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns a list of requests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LambdaApi
     */
    public lambdaListRequests(options?: AxiosRequestConfig) {
        return LambdaApiFp(this.configuration).lambdaListRequests(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns the information about the function
     * @param {LambdaApiLambdaRetrieveFunctionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LambdaApi
     */
    public lambdaRetrieveFunctions(requestParameters: LambdaApiLambdaRetrieveFunctionsRequest, options?: AxiosRequestConfig) {
        return LambdaApiFp(this.configuration).lambdaRetrieveFunctions(requestParameters.funcId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns the status of the request
     * @param {LambdaApiLambdaRetrieveRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LambdaApi
     */
    public lambdaRetrieveRequests(requestParameters: LambdaApiLambdaRetrieveRequestsRequest, options?: AxiosRequestConfig) {
        return LambdaApiFp(this.configuration).lambdaRetrieveRequests(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

