/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.31.0
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AcceptInvitationRead } from '../models';
// @ts-ignore
import type { InvitationRead } from '../models';
// @ts-ignore
import type { InvitationWriteRequest } from '../models';
// @ts-ignore
import type { PaginatedInvitationReadList } from '../models';
// @ts-ignore
import type { PatchedInvitationWriteRequest } from '../models';
/**
 * InvitationsApi - axios parameter creator
 * @export
 */
export const InvitationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept an invitation
         * @param {string} key A unique value identifying this invitation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsAccept: async (key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('invitationsAccept', 'key', key)
            const localVarPath = `/api/invitations/{key}/accept`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an invitation
         * @param {InvitationWriteRequest} invitationWriteRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsCreate: async (invitationWriteRequest: InvitationWriteRequest, xOrganization?: string, org?: string, orgId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invitationWriteRequest' is not null or undefined
            assertParamExists('invitationsCreate', 'invitationWriteRequest', invitationWriteRequest)
            const localVarPath = `/api/invitations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invitationWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline an invitation
         * @param {string} key A unique value identifying this invitation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsDecline: async (key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('invitationsDecline', 'key', key)
            const localVarPath = `/api/invitations/{key}/decline`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an invitation
         * @param {string} key A unique value identifying this invitation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsDestroy: async (key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('invitationsDestroy', 'key', key)
            const localVarPath = `/api/invitations/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List invitations
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;owner\&#39;, \&#39;user_id\&#39;, \&#39;accepted\&#39;].
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {string} [owner] A simple equality filter for the owner field
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term. Available search_fields: (\&#39;owner\&#39;,)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;owner\&#39;, \&#39;created_date\&#39;]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsList: async (xOrganization?: string, filter?: string, org?: string, orgId?: number, owner?: string, page?: number, pageSize?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/invitations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an invitation
         * @param {string} key A unique value identifying this invitation.
         * @param {PatchedInvitationWriteRequest} [patchedInvitationWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsPartialUpdate: async (key: string, patchedInvitationWriteRequest?: PatchedInvitationWriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('invitationsPartialUpdate', 'key', key)
            const localVarPath = `/api/invitations/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedInvitationWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resend an invitation
         * @param {string} key A unique value identifying this invitation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsResend: async (key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('invitationsResend', 'key', key)
            const localVarPath = `/api/invitations/{key}/resend`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get invitation details
         * @param {string} key A unique value identifying this invitation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsRetrieve: async (key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('invitationsRetrieve', 'key', key)
            const localVarPath = `/api/invitations/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvitationsApi - functional programming interface
 * @export
 */
export const InvitationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvitationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept an invitation
         * @param {string} key A unique value identifying this invitation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationsAccept(key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcceptInvitationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationsAccept(key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvitationsApi.invitationsAccept']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create an invitation
         * @param {InvitationWriteRequest} invitationWriteRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationsCreate(invitationWriteRequest: InvitationWriteRequest, xOrganization?: string, org?: string, orgId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationsCreate(invitationWriteRequest, xOrganization, org, orgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvitationsApi.invitationsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Decline an invitation
         * @param {string} key A unique value identifying this invitation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationsDecline(key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationsDecline(key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvitationsApi.invitationsDecline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an invitation
         * @param {string} key A unique value identifying this invitation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationsDestroy(key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationsDestroy(key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvitationsApi.invitationsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List invitations
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;owner\&#39;, \&#39;user_id\&#39;, \&#39;accepted\&#39;].
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {string} [owner] A simple equality filter for the owner field
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term. Available search_fields: (\&#39;owner\&#39;,)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;owner\&#39;, \&#39;created_date\&#39;]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationsList(xOrganization?: string, filter?: string, org?: string, orgId?: number, owner?: string, page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedInvitationReadList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationsList(xOrganization, filter, org, orgId, owner, page, pageSize, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvitationsApi.invitationsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an invitation
         * @param {string} key A unique value identifying this invitation.
         * @param {PatchedInvitationWriteRequest} [patchedInvitationWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationsPartialUpdate(key: string, patchedInvitationWriteRequest?: PatchedInvitationWriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationsPartialUpdate(key, patchedInvitationWriteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvitationsApi.invitationsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Resend an invitation
         * @param {string} key A unique value identifying this invitation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationsResend(key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationsResend(key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvitationsApi.invitationsResend']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get invitation details
         * @param {string} key A unique value identifying this invitation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationsRetrieve(key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationsRetrieve(key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvitationsApi.invitationsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InvitationsApi - factory interface
 * @export
 */
export const InvitationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvitationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Accept an invitation
         * @param {InvitationsApiInvitationsAcceptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsAccept(requestParameters: InvitationsApiInvitationsAcceptRequest, options?: RawAxiosRequestConfig): AxiosPromise<AcceptInvitationRead> {
            return localVarFp.invitationsAccept(requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an invitation
         * @param {InvitationsApiInvitationsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsCreate(requestParameters: InvitationsApiInvitationsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<InvitationRead> {
            return localVarFp.invitationsCreate(requestParameters.invitationWriteRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline an invitation
         * @param {InvitationsApiInvitationsDeclineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsDecline(requestParameters: InvitationsApiInvitationsDeclineRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.invitationsDecline(requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an invitation
         * @param {InvitationsApiInvitationsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsDestroy(requestParameters: InvitationsApiInvitationsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.invitationsDestroy(requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List invitations
         * @param {InvitationsApiInvitationsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsList(requestParameters: InvitationsApiInvitationsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedInvitationReadList> {
            return localVarFp.invitationsList(requestParameters.xOrganization, requestParameters.filter, requestParameters.org, requestParameters.orgId, requestParameters.owner, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an invitation
         * @param {InvitationsApiInvitationsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsPartialUpdate(requestParameters: InvitationsApiInvitationsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<InvitationRead> {
            return localVarFp.invitationsPartialUpdate(requestParameters.key, requestParameters.patchedInvitationWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resend an invitation
         * @param {InvitationsApiInvitationsResendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsResend(requestParameters: InvitationsApiInvitationsResendRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.invitationsResend(requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get invitation details
         * @param {InvitationsApiInvitationsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsRetrieve(requestParameters: InvitationsApiInvitationsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<InvitationRead> {
            return localVarFp.invitationsRetrieve(requestParameters.key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for invitationsAccept operation in InvitationsApi.
 * @export
 * @interface InvitationsApiInvitationsAcceptRequest
 */
export interface InvitationsApiInvitationsAcceptRequest {
    /**
     * A unique value identifying this invitation.
     * @type {string}
     * @memberof InvitationsApiInvitationsAccept
     */
    readonly key: string
}

/**
 * Request parameters for invitationsCreate operation in InvitationsApi.
 * @export
 * @interface InvitationsApiInvitationsCreateRequest
 */
export interface InvitationsApiInvitationsCreateRequest {
    /**
     * 
     * @type {InvitationWriteRequest}
     * @memberof InvitationsApiInvitationsCreate
     */
    readonly invitationWriteRequest: InvitationWriteRequest

    /**
     * Organization unique slug
     * @type {string}
     * @memberof InvitationsApiInvitationsCreate
     */
    readonly xOrganization?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof InvitationsApiInvitationsCreate
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof InvitationsApiInvitationsCreate
     */
    readonly orgId?: number
}

/**
 * Request parameters for invitationsDecline operation in InvitationsApi.
 * @export
 * @interface InvitationsApiInvitationsDeclineRequest
 */
export interface InvitationsApiInvitationsDeclineRequest {
    /**
     * A unique value identifying this invitation.
     * @type {string}
     * @memberof InvitationsApiInvitationsDecline
     */
    readonly key: string
}

/**
 * Request parameters for invitationsDestroy operation in InvitationsApi.
 * @export
 * @interface InvitationsApiInvitationsDestroyRequest
 */
export interface InvitationsApiInvitationsDestroyRequest {
    /**
     * A unique value identifying this invitation.
     * @type {string}
     * @memberof InvitationsApiInvitationsDestroy
     */
    readonly key: string
}

/**
 * Request parameters for invitationsList operation in InvitationsApi.
 * @export
 * @interface InvitationsApiInvitationsListRequest
 */
export interface InvitationsApiInvitationsListRequest {
    /**
     * Organization unique slug
     * @type {string}
     * @memberof InvitationsApiInvitationsList
     */
    readonly xOrganization?: string

    /**
     *  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;owner\&#39;, \&#39;user_id\&#39;, \&#39;accepted\&#39;].
     * @type {string}
     * @memberof InvitationsApiInvitationsList
     */
    readonly filter?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof InvitationsApiInvitationsList
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof InvitationsApiInvitationsList
     */
    readonly orgId?: number

    /**
     * A simple equality filter for the owner field
     * @type {string}
     * @memberof InvitationsApiInvitationsList
     */
    readonly owner?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof InvitationsApiInvitationsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof InvitationsApiInvitationsList
     */
    readonly pageSize?: number

    /**
     * A search term. Available search_fields: (\&#39;owner\&#39;,)
     * @type {string}
     * @memberof InvitationsApiInvitationsList
     */
    readonly search?: string

    /**
     * Which field to use when ordering the results. Available ordering_fields: [\&#39;owner\&#39;, \&#39;created_date\&#39;]
     * @type {string}
     * @memberof InvitationsApiInvitationsList
     */
    readonly sort?: string
}

/**
 * Request parameters for invitationsPartialUpdate operation in InvitationsApi.
 * @export
 * @interface InvitationsApiInvitationsPartialUpdateRequest
 */
export interface InvitationsApiInvitationsPartialUpdateRequest {
    /**
     * A unique value identifying this invitation.
     * @type {string}
     * @memberof InvitationsApiInvitationsPartialUpdate
     */
    readonly key: string

    /**
     * 
     * @type {PatchedInvitationWriteRequest}
     * @memberof InvitationsApiInvitationsPartialUpdate
     */
    readonly patchedInvitationWriteRequest?: PatchedInvitationWriteRequest
}

/**
 * Request parameters for invitationsResend operation in InvitationsApi.
 * @export
 * @interface InvitationsApiInvitationsResendRequest
 */
export interface InvitationsApiInvitationsResendRequest {
    /**
     * A unique value identifying this invitation.
     * @type {string}
     * @memberof InvitationsApiInvitationsResend
     */
    readonly key: string
}

/**
 * Request parameters for invitationsRetrieve operation in InvitationsApi.
 * @export
 * @interface InvitationsApiInvitationsRetrieveRequest
 */
export interface InvitationsApiInvitationsRetrieveRequest {
    /**
     * A unique value identifying this invitation.
     * @type {string}
     * @memberof InvitationsApiInvitationsRetrieve
     */
    readonly key: string
}

/**
 * InvitationsApi - object-oriented interface
 * @export
 * @class InvitationsApi
 * @extends {BaseAPI}
 */
export class InvitationsApi extends BaseAPI {
    /**
     * 
     * @summary Accept an invitation
     * @param {InvitationsApiInvitationsAcceptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationsAccept(requestParameters: InvitationsApiInvitationsAcceptRequest, options?: RawAxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationsAccept(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create an invitation
     * @param {InvitationsApiInvitationsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationsCreate(requestParameters: InvitationsApiInvitationsCreateRequest, options?: RawAxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationsCreate(requestParameters.invitationWriteRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline an invitation
     * @param {InvitationsApiInvitationsDeclineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationsDecline(requestParameters: InvitationsApiInvitationsDeclineRequest, options?: RawAxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationsDecline(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an invitation
     * @param {InvitationsApiInvitationsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationsDestroy(requestParameters: InvitationsApiInvitationsDestroyRequest, options?: RawAxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationsDestroy(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List invitations
     * @param {InvitationsApiInvitationsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationsList(requestParameters: InvitationsApiInvitationsListRequest = {}, options?: RawAxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationsList(requestParameters.xOrganization, requestParameters.filter, requestParameters.org, requestParameters.orgId, requestParameters.owner, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an invitation
     * @param {InvitationsApiInvitationsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationsPartialUpdate(requestParameters: InvitationsApiInvitationsPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationsPartialUpdate(requestParameters.key, requestParameters.patchedInvitationWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resend an invitation
     * @param {InvitationsApiInvitationsResendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationsResend(requestParameters: InvitationsApiInvitationsResendRequest, options?: RawAxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationsResend(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get invitation details
     * @param {InvitationsApiInvitationsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationsRetrieve(requestParameters: InvitationsApiInvitationsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationsRetrieve(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }
}

