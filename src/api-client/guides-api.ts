/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.31.0
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AnnotationGuideRead } from '../models';
// @ts-ignore
import type { AnnotationGuideWriteRequest } from '../models';
// @ts-ignore
import type { PatchedAnnotationGuideWriteRequest } from '../models';
/**
 * GuidesApi - axios parameter creator
 * @export
 */
export const GuidesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The new guide will be bound either to a project or a task, depending on parameters.
         * @summary Create an annotation guide
         * @param {AnnotationGuideWriteRequest} [annotationGuideWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guidesCreate: async (annotationGuideWriteRequest?: AnnotationGuideWriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/guides`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(annotationGuideWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This also deletes all assets attached to the guide.
         * @summary Delete an annotation guide
         * @param {number} id A unique integer value identifying this annotation guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guidesDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('guidesDestroy', 'id', id)
            const localVarPath = `/api/guides/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an annotation guide
         * @param {number} id A unique integer value identifying this annotation guide.
         * @param {PatchedAnnotationGuideWriteRequest} [patchedAnnotationGuideWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guidesPartialUpdate: async (id: number, patchedAnnotationGuideWriteRequest?: PatchedAnnotationGuideWriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('guidesPartialUpdate', 'id', id)
            const localVarPath = `/api/guides/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedAnnotationGuideWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get annotation guide details
         * @param {number} id A unique integer value identifying this annotation guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guidesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('guidesRetrieve', 'id', id)
            const localVarPath = `/api/guides/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuidesApi - functional programming interface
 * @export
 */
export const GuidesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuidesApiAxiosParamCreator(configuration)
    return {
        /**
         * The new guide will be bound either to a project or a task, depending on parameters.
         * @summary Create an annotation guide
         * @param {AnnotationGuideWriteRequest} [annotationGuideWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guidesCreate(annotationGuideWriteRequest?: AnnotationGuideWriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationGuideRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.guidesCreate(annotationGuideWriteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuidesApi.guidesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This also deletes all assets attached to the guide.
         * @summary Delete an annotation guide
         * @param {number} id A unique integer value identifying this annotation guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guidesDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.guidesDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuidesApi.guidesDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an annotation guide
         * @param {number} id A unique integer value identifying this annotation guide.
         * @param {PatchedAnnotationGuideWriteRequest} [patchedAnnotationGuideWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guidesPartialUpdate(id: number, patchedAnnotationGuideWriteRequest?: PatchedAnnotationGuideWriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationGuideRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.guidesPartialUpdate(id, patchedAnnotationGuideWriteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuidesApi.guidesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get annotation guide details
         * @param {number} id A unique integer value identifying this annotation guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guidesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationGuideRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.guidesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuidesApi.guidesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GuidesApi - factory interface
 * @export
 */
export const GuidesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuidesApiFp(configuration)
    return {
        /**
         * The new guide will be bound either to a project or a task, depending on parameters.
         * @summary Create an annotation guide
         * @param {GuidesApiGuidesCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guidesCreate(requestParameters: GuidesApiGuidesCreateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationGuideRead> {
            return localVarFp.guidesCreate(requestParameters.annotationGuideWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This also deletes all assets attached to the guide.
         * @summary Delete an annotation guide
         * @param {GuidesApiGuidesDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guidesDestroy(requestParameters: GuidesApiGuidesDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.guidesDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an annotation guide
         * @param {GuidesApiGuidesPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guidesPartialUpdate(requestParameters: GuidesApiGuidesPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationGuideRead> {
            return localVarFp.guidesPartialUpdate(requestParameters.id, requestParameters.patchedAnnotationGuideWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get annotation guide details
         * @param {GuidesApiGuidesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guidesRetrieve(requestParameters: GuidesApiGuidesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationGuideRead> {
            return localVarFp.guidesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for guidesCreate operation in GuidesApi.
 * @export
 * @interface GuidesApiGuidesCreateRequest
 */
export interface GuidesApiGuidesCreateRequest {
    /**
     * 
     * @type {AnnotationGuideWriteRequest}
     * @memberof GuidesApiGuidesCreate
     */
    readonly annotationGuideWriteRequest?: AnnotationGuideWriteRequest
}

/**
 * Request parameters for guidesDestroy operation in GuidesApi.
 * @export
 * @interface GuidesApiGuidesDestroyRequest
 */
export interface GuidesApiGuidesDestroyRequest {
    /**
     * A unique integer value identifying this annotation guide.
     * @type {number}
     * @memberof GuidesApiGuidesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for guidesPartialUpdate operation in GuidesApi.
 * @export
 * @interface GuidesApiGuidesPartialUpdateRequest
 */
export interface GuidesApiGuidesPartialUpdateRequest {
    /**
     * A unique integer value identifying this annotation guide.
     * @type {number}
     * @memberof GuidesApiGuidesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedAnnotationGuideWriteRequest}
     * @memberof GuidesApiGuidesPartialUpdate
     */
    readonly patchedAnnotationGuideWriteRequest?: PatchedAnnotationGuideWriteRequest
}

/**
 * Request parameters for guidesRetrieve operation in GuidesApi.
 * @export
 * @interface GuidesApiGuidesRetrieveRequest
 */
export interface GuidesApiGuidesRetrieveRequest {
    /**
     * A unique integer value identifying this annotation guide.
     * @type {number}
     * @memberof GuidesApiGuidesRetrieve
     */
    readonly id: number
}

/**
 * GuidesApi - object-oriented interface
 * @export
 * @class GuidesApi
 * @extends {BaseAPI}
 */
export class GuidesApi extends BaseAPI {
    /**
     * The new guide will be bound either to a project or a task, depending on parameters.
     * @summary Create an annotation guide
     * @param {GuidesApiGuidesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuidesApi
     */
    public guidesCreate(requestParameters: GuidesApiGuidesCreateRequest = {}, options?: RawAxiosRequestConfig) {
        return GuidesApiFp(this.configuration).guidesCreate(requestParameters.annotationGuideWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This also deletes all assets attached to the guide.
     * @summary Delete an annotation guide
     * @param {GuidesApiGuidesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuidesApi
     */
    public guidesDestroy(requestParameters: GuidesApiGuidesDestroyRequest, options?: RawAxiosRequestConfig) {
        return GuidesApiFp(this.configuration).guidesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an annotation guide
     * @param {GuidesApiGuidesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuidesApi
     */
    public guidesPartialUpdate(requestParameters: GuidesApiGuidesPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return GuidesApiFp(this.configuration).guidesPartialUpdate(requestParameters.id, requestParameters.patchedAnnotationGuideWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get annotation guide details
     * @param {GuidesApiGuidesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuidesApi
     */
    public guidesRetrieve(requestParameters: GuidesApiGuidesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return GuidesApiFp(this.configuration).guidesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

