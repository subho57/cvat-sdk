/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.4.9
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Label } from '../models';
// @ts-ignore
import { PaginatedLabelList } from '../models';
// @ts-ignore
import { PatchedLabelRequest } from '../models';
/**
 * LabelsApi - axios parameter creator
 * @export
 */
export const LabelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Method deletes a label. To delete a sublabel, please use the PATCH method of the parent label
         * @param {number} id A unique integer value identifying this label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('labelsDestroy', 'id', id)
            const localVarPath = `/api/labels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns a paginated list of labels
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [color] A simple equality filter for the color field
         * @param {string} [filter] A filter term. Available filter_fields: [\&#39;name\&#39;, \&#39;parent\&#39;, \&#39;id\&#39;, \&#39;type\&#39;, \&#39;color\&#39;, \&#39;parent_id\&#39;]
         * @param {number} [jobId] A simple equality filter for job id
         * @param {string} [name] A simple equality filter for the name field
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [parent] A simple equality filter for the parent field
         * @param {number} [parentId] A simple equality filter for the parent_id field
         * @param {number} [projectId] A simple equality filter for project id
         * @param {string} [search] A search term. Available search_fields: (\&#39;name\&#39;, \&#39;parent\&#39;)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;name\&#39;, \&#39;parent\&#39;, \&#39;id\&#39;, \&#39;type\&#39;, \&#39;color\&#39;, \&#39;parent_id\&#39;]
         * @param {number} [taskId] A simple equality filter for task id
         * @param {LabelsListTypeEnum} [type] A simple equality filter for the type field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsList: async (xOrganization?: string, color?: string, filter?: string, jobId?: number, name?: string, org?: string, orgId?: number, page?: number, pageSize?: number, parent?: string, parentId?: number, projectId?: number, search?: string, sort?: string, taskId?: number, type?: LabelsListTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/labels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (color !== undefined) {
                localVarQueryParameter['color'] = color;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parent_id'] = parentId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in a labelTo modify a sublabel, please use the PATCH method of the parent label
         * @param {number} id A unique integer value identifying this label.
         * @param {PatchedLabelRequest} [patchedLabelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsPartialUpdate: async (id: number, patchedLabelRequest?: PatchedLabelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('labelsPartialUpdate', 'id', id)
            const localVarPath = `/api/labels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedLabelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns details of a label
         * @param {number} id A unique integer value identifying this label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('labelsRetrieve', 'id', id)
            const localVarPath = `/api/labels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LabelsApi - functional programming interface
 * @export
 */
export const LabelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LabelsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Method deletes a label. To delete a sublabel, please use the PATCH method of the parent label
         * @param {number} id A unique integer value identifying this label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async labelsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.labelsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns a paginated list of labels
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [color] A simple equality filter for the color field
         * @param {string} [filter] A filter term. Available filter_fields: [\&#39;name\&#39;, \&#39;parent\&#39;, \&#39;id\&#39;, \&#39;type\&#39;, \&#39;color\&#39;, \&#39;parent_id\&#39;]
         * @param {number} [jobId] A simple equality filter for job id
         * @param {string} [name] A simple equality filter for the name field
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [parent] A simple equality filter for the parent field
         * @param {number} [parentId] A simple equality filter for the parent_id field
         * @param {number} [projectId] A simple equality filter for project id
         * @param {string} [search] A search term. Available search_fields: (\&#39;name\&#39;, \&#39;parent\&#39;)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;name\&#39;, \&#39;parent\&#39;, \&#39;id\&#39;, \&#39;type\&#39;, \&#39;color\&#39;, \&#39;parent_id\&#39;]
         * @param {number} [taskId] A simple equality filter for task id
         * @param {LabelsListTypeEnum} [type] A simple equality filter for the type field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async labelsList(xOrganization?: string, color?: string, filter?: string, jobId?: number, name?: string, org?: string, orgId?: number, page?: number, pageSize?: number, parent?: string, parentId?: number, projectId?: number, search?: string, sort?: string, taskId?: number, type?: LabelsListTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedLabelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.labelsList(xOrganization, color, filter, jobId, name, org, orgId, page, pageSize, parent, parentId, projectId, search, sort, taskId, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in a labelTo modify a sublabel, please use the PATCH method of the parent label
         * @param {number} id A unique integer value identifying this label.
         * @param {PatchedLabelRequest} [patchedLabelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async labelsPartialUpdate(id: number, patchedLabelRequest?: PatchedLabelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.labelsPartialUpdate(id, patchedLabelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns details of a label
         * @param {number} id A unique integer value identifying this label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async labelsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.labelsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LabelsApi - factory interface
 * @export
 */
export const LabelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LabelsApiFp(configuration)
    return {
        /**
         * 
         * @summary Method deletes a label. To delete a sublabel, please use the PATCH method of the parent label
         * @param {LabelsApiLabelsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsDestroy(requestParameters: LabelsApiLabelsDestroyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.labelsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns a paginated list of labels
         * @param {LabelsApiLabelsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsList(requestParameters: LabelsApiLabelsListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedLabelList> {
            return localVarFp.labelsList(requestParameters.xOrganization, requestParameters.color, requestParameters.filter, requestParameters.jobId, requestParameters.name, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.parent, requestParameters.parentId, requestParameters.projectId, requestParameters.search, requestParameters.sort, requestParameters.taskId, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in a labelTo modify a sublabel, please use the PATCH method of the parent label
         * @param {LabelsApiLabelsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsPartialUpdate(requestParameters: LabelsApiLabelsPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Label> {
            return localVarFp.labelsPartialUpdate(requestParameters.id, requestParameters.patchedLabelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns details of a label
         * @param {LabelsApiLabelsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsRetrieve(requestParameters: LabelsApiLabelsRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<Label> {
            return localVarFp.labelsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for labelsDestroy operation in LabelsApi.
 * @export
 * @interface LabelsApiLabelsDestroyRequest
 */
export interface LabelsApiLabelsDestroyRequest {
    /**
     * A unique integer value identifying this label.
     * @type {number}
     * @memberof LabelsApiLabelsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for labelsList operation in LabelsApi.
 * @export
 * @interface LabelsApiLabelsListRequest
 */
export interface LabelsApiLabelsListRequest {
    /**
     * Organization unique slug
     * @type {string}
     * @memberof LabelsApiLabelsList
     */
    readonly xOrganization?: string

    /**
     * A simple equality filter for the color field
     * @type {string}
     * @memberof LabelsApiLabelsList
     */
    readonly color?: string

    /**
     * A filter term. Available filter_fields: [\&#39;name\&#39;, \&#39;parent\&#39;, \&#39;id\&#39;, \&#39;type\&#39;, \&#39;color\&#39;, \&#39;parent_id\&#39;]
     * @type {string}
     * @memberof LabelsApiLabelsList
     */
    readonly filter?: string

    /**
     * A simple equality filter for job id
     * @type {number}
     * @memberof LabelsApiLabelsList
     */
    readonly jobId?: number

    /**
     * A simple equality filter for the name field
     * @type {string}
     * @memberof LabelsApiLabelsList
     */
    readonly name?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof LabelsApiLabelsList
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof LabelsApiLabelsList
     */
    readonly orgId?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof LabelsApiLabelsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof LabelsApiLabelsList
     */
    readonly pageSize?: number

    /**
     * A simple equality filter for the parent field
     * @type {string}
     * @memberof LabelsApiLabelsList
     */
    readonly parent?: string

    /**
     * A simple equality filter for the parent_id field
     * @type {number}
     * @memberof LabelsApiLabelsList
     */
    readonly parentId?: number

    /**
     * A simple equality filter for project id
     * @type {number}
     * @memberof LabelsApiLabelsList
     */
    readonly projectId?: number

    /**
     * A search term. Available search_fields: (\&#39;name\&#39;, \&#39;parent\&#39;)
     * @type {string}
     * @memberof LabelsApiLabelsList
     */
    readonly search?: string

    /**
     * Which field to use when ordering the results. Available ordering_fields: [\&#39;name\&#39;, \&#39;parent\&#39;, \&#39;id\&#39;, \&#39;type\&#39;, \&#39;color\&#39;, \&#39;parent_id\&#39;]
     * @type {string}
     * @memberof LabelsApiLabelsList
     */
    readonly sort?: string

    /**
     * A simple equality filter for task id
     * @type {number}
     * @memberof LabelsApiLabelsList
     */
    readonly taskId?: number

    /**
     * A simple equality filter for the type field
     * @type {'bbox' | 'ellipse' | 'polygon' | 'polyline' | 'points' | 'cuboid' | 'cuboid_3d' | 'skeleton' | 'tag' | 'any'}
     * @memberof LabelsApiLabelsList
     */
    readonly type?: LabelsListTypeEnum
}

/**
 * Request parameters for labelsPartialUpdate operation in LabelsApi.
 * @export
 * @interface LabelsApiLabelsPartialUpdateRequest
 */
export interface LabelsApiLabelsPartialUpdateRequest {
    /**
     * A unique integer value identifying this label.
     * @type {number}
     * @memberof LabelsApiLabelsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedLabelRequest}
     * @memberof LabelsApiLabelsPartialUpdate
     */
    readonly patchedLabelRequest?: PatchedLabelRequest
}

/**
 * Request parameters for labelsRetrieve operation in LabelsApi.
 * @export
 * @interface LabelsApiLabelsRetrieveRequest
 */
export interface LabelsApiLabelsRetrieveRequest {
    /**
     * A unique integer value identifying this label.
     * @type {number}
     * @memberof LabelsApiLabelsRetrieve
     */
    readonly id: number
}

/**
 * LabelsApi - object-oriented interface
 * @export
 * @class LabelsApi
 * @extends {BaseAPI}
 */
export class LabelsApi extends BaseAPI {
    /**
     * 
     * @summary Method deletes a label. To delete a sublabel, please use the PATCH method of the parent label
     * @param {LabelsApiLabelsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    public labelsDestroy(requestParameters: LabelsApiLabelsDestroyRequest, options?: AxiosRequestConfig) {
        return LabelsApiFp(this.configuration).labelsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns a paginated list of labels
     * @param {LabelsApiLabelsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    public labelsList(requestParameters: LabelsApiLabelsListRequest = {}, options?: AxiosRequestConfig) {
        return LabelsApiFp(this.configuration).labelsList(requestParameters.xOrganization, requestParameters.color, requestParameters.filter, requestParameters.jobId, requestParameters.name, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.parent, requestParameters.parentId, requestParameters.projectId, requestParameters.search, requestParameters.sort, requestParameters.taskId, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Methods does a partial update of chosen fields in a labelTo modify a sublabel, please use the PATCH method of the parent label
     * @param {LabelsApiLabelsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    public labelsPartialUpdate(requestParameters: LabelsApiLabelsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return LabelsApiFp(this.configuration).labelsPartialUpdate(requestParameters.id, requestParameters.patchedLabelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns details of a label
     * @param {LabelsApiLabelsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    public labelsRetrieve(requestParameters: LabelsApiLabelsRetrieveRequest, options?: AxiosRequestConfig) {
        return LabelsApiFp(this.configuration).labelsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const LabelsListTypeEnum = {
    Bbox: 'bbox',
    Ellipse: 'ellipse',
    Polygon: 'polygon',
    Polyline: 'polyline',
    Points: 'points',
    Cuboid: 'cuboid',
    Cuboid3d: 'cuboid_3d',
    Skeleton: 'skeleton',
    Tag: 'tag',
    Any: 'any'
} as const;
export type LabelsListTypeEnum = typeof LabelsListTypeEnum[keyof typeof LabelsListTypeEnum];
