/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.30.0
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CloudStorageContent } from '../models';
// @ts-ignore
import type { CloudStorageRead } from '../models';
// @ts-ignore
import type { CloudStorageWriteRequest } from '../models';
// @ts-ignore
import type { PaginatedCloudStorageReadList } from '../models';
// @ts-ignore
import type { PatchedCloudStorageWriteRequest } from '../models';
/**
 * CloudstoragesApi - axios parameter creator
 * @export
 */
export const CloudstoragesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a cloud storage
         * @param {CloudStorageWriteRequest} cloudStorageWriteRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesCreate: async (cloudStorageWriteRequest: CloudStorageWriteRequest, xOrganization?: string, org?: string, orgId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cloudStorageWriteRequest' is not null or undefined
            assertParamExists('cloudstoragesCreate', 'cloudStorageWriteRequest', cloudStorageWriteRequest)
            const localVarPath = `/api/cloudstorages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudStorageWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a cloud storage
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudstoragesDestroy', 'id', id)
            const localVarPath = `/api/cloudstorages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List cloud storages
         * @param {string} [xOrganization] Organization unique slug
         * @param {CloudstoragesListCredentialsTypeEnum} [credentialsType] A simple equality filter for the credentials_type field
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;provider_type\&#39;, \&#39;name\&#39;, \&#39;resource\&#39;, \&#39;credentials_type\&#39;, \&#39;owner\&#39;, \&#39;description\&#39;, \&#39;id\&#39;].
         * @param {string} [name] A simple equality filter for the name field
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {string} [owner] A simple equality filter for the owner field
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {CloudstoragesListProviderTypeEnum} [providerType] A simple equality filter for the provider_type field
         * @param {string} [resource] A simple equality filter for the resource field
         * @param {string} [search] A search term. Available search_fields: (\&#39;provider_type\&#39;, \&#39;name\&#39;, \&#39;resource\&#39;, \&#39;credentials_type\&#39;, \&#39;owner\&#39;, \&#39;description\&#39;)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;provider_type\&#39;, \&#39;name\&#39;, \&#39;resource\&#39;, \&#39;credentials_type\&#39;, \&#39;owner\&#39;, \&#39;description\&#39;, \&#39;id\&#39;]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesList: async (xOrganization?: string, credentialsType?: CloudstoragesListCredentialsTypeEnum, filter?: string, name?: string, org?: string, orgId?: number, owner?: string, page?: number, pageSize?: number, providerType?: CloudstoragesListProviderTypeEnum, resource?: string, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cloudstorages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (credentialsType !== undefined) {
                localVarQueryParameter['credentials_type'] = credentialsType;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (providerType !== undefined) {
                localVarQueryParameter['provider_type'] = providerType;
            }

            if (resource !== undefined) {
                localVarQueryParameter['resource'] = resource;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a cloud storage
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {PatchedCloudStorageWriteRequest} [patchedCloudStorageWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesPartialUpdate: async (id: number, patchedCloudStorageWriteRequest?: PatchedCloudStorageWriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudstoragesPartialUpdate', 'id', id)
            const localVarPath = `/api/cloudstorages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedCloudStorageWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get cloud storage details
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudstoragesRetrieve', 'id', id)
            const localVarPath = `/api/cloudstorages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Method return allowed actions for cloud storage. It\'s required for reading/writing
         * @summary Get allowed actions for a cloud storage
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesRetrieveActions: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudstoragesRetrieveActions', 'id', id)
            const localVarPath = `/api/cloudstorages/{id}/actions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get cloud storage content
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {string} [manifestPath] Path to the manifest file in a cloud storage
         * @param {string} [nextToken] Used to continue listing files in the bucket
         * @param {number} [pageSize] 
         * @param {string} [prefix] Prefix to filter data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesRetrieveContentV2: async (id: number, manifestPath?: string, nextToken?: string, pageSize?: number, prefix?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudstoragesRetrieveContentV2', 'id', id)
            const localVarPath = `/api/cloudstorages/{id}/content-v2`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (manifestPath !== undefined) {
                localVarQueryParameter['manifest_path'] = manifestPath;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['next_token'] = nextToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a preview image for a cloud storage
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesRetrievePreview: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudstoragesRetrievePreview', 'id', id)
            const localVarPath = `/api/cloudstorages/{id}/preview`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the status of a cloud storage
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesRetrieveStatus: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudstoragesRetrieveStatus', 'id', id)
            const localVarPath = `/api/cloudstorages/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloudstoragesApi - functional programming interface
 * @export
 */
export const CloudstoragesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloudstoragesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a cloud storage
         * @param {CloudStorageWriteRequest} cloudStorageWriteRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstoragesCreate(cloudStorageWriteRequest: CloudStorageWriteRequest, xOrganization?: string, org?: string, orgId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudStorageRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstoragesCreate(cloudStorageWriteRequest, xOrganization, org, orgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudstoragesApi.cloudstoragesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a cloud storage
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstoragesDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstoragesDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudstoragesApi.cloudstoragesDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List cloud storages
         * @param {string} [xOrganization] Organization unique slug
         * @param {CloudstoragesListCredentialsTypeEnum} [credentialsType] A simple equality filter for the credentials_type field
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;provider_type\&#39;, \&#39;name\&#39;, \&#39;resource\&#39;, \&#39;credentials_type\&#39;, \&#39;owner\&#39;, \&#39;description\&#39;, \&#39;id\&#39;].
         * @param {string} [name] A simple equality filter for the name field
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {string} [owner] A simple equality filter for the owner field
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {CloudstoragesListProviderTypeEnum} [providerType] A simple equality filter for the provider_type field
         * @param {string} [resource] A simple equality filter for the resource field
         * @param {string} [search] A search term. Available search_fields: (\&#39;provider_type\&#39;, \&#39;name\&#39;, \&#39;resource\&#39;, \&#39;credentials_type\&#39;, \&#39;owner\&#39;, \&#39;description\&#39;)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;provider_type\&#39;, \&#39;name\&#39;, \&#39;resource\&#39;, \&#39;credentials_type\&#39;, \&#39;owner\&#39;, \&#39;description\&#39;, \&#39;id\&#39;]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstoragesList(xOrganization?: string, credentialsType?: CloudstoragesListCredentialsTypeEnum, filter?: string, name?: string, org?: string, orgId?: number, owner?: string, page?: number, pageSize?: number, providerType?: CloudstoragesListProviderTypeEnum, resource?: string, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCloudStorageReadList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstoragesList(xOrganization, credentialsType, filter, name, org, orgId, owner, page, pageSize, providerType, resource, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudstoragesApi.cloudstoragesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a cloud storage
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {PatchedCloudStorageWriteRequest} [patchedCloudStorageWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstoragesPartialUpdate(id: number, patchedCloudStorageWriteRequest?: PatchedCloudStorageWriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudStorageRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstoragesPartialUpdate(id, patchedCloudStorageWriteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudstoragesApi.cloudstoragesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get cloud storage details
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstoragesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudStorageRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstoragesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudstoragesApi.cloudstoragesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Method return allowed actions for cloud storage. It\'s required for reading/writing
         * @summary Get allowed actions for a cloud storage
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstoragesRetrieveActions(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstoragesRetrieveActions(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudstoragesApi.cloudstoragesRetrieveActions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get cloud storage content
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {string} [manifestPath] Path to the manifest file in a cloud storage
         * @param {string} [nextToken] Used to continue listing files in the bucket
         * @param {number} [pageSize] 
         * @param {string} [prefix] Prefix to filter data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstoragesRetrieveContentV2(id: number, manifestPath?: string, nextToken?: string, pageSize?: number, prefix?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudStorageContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstoragesRetrieveContentV2(id, manifestPath, nextToken, pageSize, prefix, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudstoragesApi.cloudstoragesRetrieveContentV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a preview image for a cloud storage
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstoragesRetrievePreview(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstoragesRetrievePreview(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudstoragesApi.cloudstoragesRetrievePreview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the status of a cloud storage
         * @param {number} id A unique integer value identifying this cloud storage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstoragesRetrieveStatus(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstoragesRetrieveStatus(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudstoragesApi.cloudstoragesRetrieveStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CloudstoragesApi - factory interface
 * @export
 */
export const CloudstoragesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloudstoragesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a cloud storage
         * @param {CloudstoragesApiCloudstoragesCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesCreate(requestParameters: CloudstoragesApiCloudstoragesCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CloudStorageRead> {
            return localVarFp.cloudstoragesCreate(requestParameters.cloudStorageWriteRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a cloud storage
         * @param {CloudstoragesApiCloudstoragesDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesDestroy(requestParameters: CloudstoragesApiCloudstoragesDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cloudstoragesDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List cloud storages
         * @param {CloudstoragesApiCloudstoragesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesList(requestParameters: CloudstoragesApiCloudstoragesListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedCloudStorageReadList> {
            return localVarFp.cloudstoragesList(requestParameters.xOrganization, requestParameters.credentialsType, requestParameters.filter, requestParameters.name, requestParameters.org, requestParameters.orgId, requestParameters.owner, requestParameters.page, requestParameters.pageSize, requestParameters.providerType, requestParameters.resource, requestParameters.search, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a cloud storage
         * @param {CloudstoragesApiCloudstoragesPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesPartialUpdate(requestParameters: CloudstoragesApiCloudstoragesPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CloudStorageRead> {
            return localVarFp.cloudstoragesPartialUpdate(requestParameters.id, requestParameters.patchedCloudStorageWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get cloud storage details
         * @param {CloudstoragesApiCloudstoragesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesRetrieve(requestParameters: CloudstoragesApiCloudstoragesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<CloudStorageRead> {
            return localVarFp.cloudstoragesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Method return allowed actions for cloud storage. It\'s required for reading/writing
         * @summary Get allowed actions for a cloud storage
         * @param {CloudstoragesApiCloudstoragesRetrieveActionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesRetrieveActions(requestParameters: CloudstoragesApiCloudstoragesRetrieveActionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.cloudstoragesRetrieveActions(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get cloud storage content
         * @param {CloudstoragesApiCloudstoragesRetrieveContentV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesRetrieveContentV2(requestParameters: CloudstoragesApiCloudstoragesRetrieveContentV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CloudStorageContent> {
            return localVarFp.cloudstoragesRetrieveContentV2(requestParameters.id, requestParameters.manifestPath, requestParameters.nextToken, requestParameters.pageSize, requestParameters.prefix, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a preview image for a cloud storage
         * @param {CloudstoragesApiCloudstoragesRetrievePreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesRetrievePreview(requestParameters: CloudstoragesApiCloudstoragesRetrievePreviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cloudstoragesRetrievePreview(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the status of a cloud storage
         * @param {CloudstoragesApiCloudstoragesRetrieveStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstoragesRetrieveStatus(requestParameters: CloudstoragesApiCloudstoragesRetrieveStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.cloudstoragesRetrieveStatus(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cloudstoragesCreate operation in CloudstoragesApi.
 * @export
 * @interface CloudstoragesApiCloudstoragesCreateRequest
 */
export interface CloudstoragesApiCloudstoragesCreateRequest {
    /**
     * 
     * @type {CloudStorageWriteRequest}
     * @memberof CloudstoragesApiCloudstoragesCreate
     */
    readonly cloudStorageWriteRequest: CloudStorageWriteRequest

    /**
     * Organization unique slug
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesCreate
     */
    readonly xOrganization?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesCreate
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesCreate
     */
    readonly orgId?: number
}

/**
 * Request parameters for cloudstoragesDestroy operation in CloudstoragesApi.
 * @export
 * @interface CloudstoragesApiCloudstoragesDestroyRequest
 */
export interface CloudstoragesApiCloudstoragesDestroyRequest {
    /**
     * A unique integer value identifying this cloud storage.
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for cloudstoragesList operation in CloudstoragesApi.
 * @export
 * @interface CloudstoragesApiCloudstoragesListRequest
 */
export interface CloudstoragesApiCloudstoragesListRequest {
    /**
     * Organization unique slug
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly xOrganization?: string

    /**
     * A simple equality filter for the credentials_type field
     * @type {'KEY_SECRET_KEY_PAIR' | 'ACCOUNT_NAME_TOKEN_PAIR' | 'KEY_FILE_PATH' | 'ANONYMOUS_ACCESS' | 'CONNECTION_STRING'}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly credentialsType?: CloudstoragesListCredentialsTypeEnum

    /**
     *  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;provider_type\&#39;, \&#39;name\&#39;, \&#39;resource\&#39;, \&#39;credentials_type\&#39;, \&#39;owner\&#39;, \&#39;description\&#39;, \&#39;id\&#39;].
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly filter?: string

    /**
     * A simple equality filter for the name field
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly name?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly orgId?: number

    /**
     * A simple equality filter for the owner field
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly owner?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly pageSize?: number

    /**
     * A simple equality filter for the provider_type field
     * @type {'AWS_S3_BUCKET' | 'AZURE_CONTAINER' | 'GOOGLE_DRIVE' | 'GOOGLE_CLOUD_STORAGE'}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly providerType?: CloudstoragesListProviderTypeEnum

    /**
     * A simple equality filter for the resource field
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly resource?: string

    /**
     * A search term. Available search_fields: (\&#39;provider_type\&#39;, \&#39;name\&#39;, \&#39;resource\&#39;, \&#39;credentials_type\&#39;, \&#39;owner\&#39;, \&#39;description\&#39;)
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly search?: string

    /**
     * Which field to use when ordering the results. Available ordering_fields: [\&#39;provider_type\&#39;, \&#39;name\&#39;, \&#39;resource\&#39;, \&#39;credentials_type\&#39;, \&#39;owner\&#39;, \&#39;description\&#39;, \&#39;id\&#39;]
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesList
     */
    readonly sort?: string
}

/**
 * Request parameters for cloudstoragesPartialUpdate operation in CloudstoragesApi.
 * @export
 * @interface CloudstoragesApiCloudstoragesPartialUpdateRequest
 */
export interface CloudstoragesApiCloudstoragesPartialUpdateRequest {
    /**
     * A unique integer value identifying this cloud storage.
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedCloudStorageWriteRequest}
     * @memberof CloudstoragesApiCloudstoragesPartialUpdate
     */
    readonly patchedCloudStorageWriteRequest?: PatchedCloudStorageWriteRequest
}

/**
 * Request parameters for cloudstoragesRetrieve operation in CloudstoragesApi.
 * @export
 * @interface CloudstoragesApiCloudstoragesRetrieveRequest
 */
export interface CloudstoragesApiCloudstoragesRetrieveRequest {
    /**
     * A unique integer value identifying this cloud storage.
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for cloudstoragesRetrieveActions operation in CloudstoragesApi.
 * @export
 * @interface CloudstoragesApiCloudstoragesRetrieveActionsRequest
 */
export interface CloudstoragesApiCloudstoragesRetrieveActionsRequest {
    /**
     * A unique integer value identifying this cloud storage.
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesRetrieveActions
     */
    readonly id: number
}

/**
 * Request parameters for cloudstoragesRetrieveContentV2 operation in CloudstoragesApi.
 * @export
 * @interface CloudstoragesApiCloudstoragesRetrieveContentV2Request
 */
export interface CloudstoragesApiCloudstoragesRetrieveContentV2Request {
    /**
     * A unique integer value identifying this cloud storage.
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesRetrieveContentV2
     */
    readonly id: number

    /**
     * Path to the manifest file in a cloud storage
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesRetrieveContentV2
     */
    readonly manifestPath?: string

    /**
     * Used to continue listing files in the bucket
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesRetrieveContentV2
     */
    readonly nextToken?: string

    /**
     * 
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesRetrieveContentV2
     */
    readonly pageSize?: number

    /**
     * Prefix to filter data
     * @type {string}
     * @memberof CloudstoragesApiCloudstoragesRetrieveContentV2
     */
    readonly prefix?: string
}

/**
 * Request parameters for cloudstoragesRetrievePreview operation in CloudstoragesApi.
 * @export
 * @interface CloudstoragesApiCloudstoragesRetrievePreviewRequest
 */
export interface CloudstoragesApiCloudstoragesRetrievePreviewRequest {
    /**
     * A unique integer value identifying this cloud storage.
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesRetrievePreview
     */
    readonly id: number
}

/**
 * Request parameters for cloudstoragesRetrieveStatus operation in CloudstoragesApi.
 * @export
 * @interface CloudstoragesApiCloudstoragesRetrieveStatusRequest
 */
export interface CloudstoragesApiCloudstoragesRetrieveStatusRequest {
    /**
     * A unique integer value identifying this cloud storage.
     * @type {number}
     * @memberof CloudstoragesApiCloudstoragesRetrieveStatus
     */
    readonly id: number
}

/**
 * CloudstoragesApi - object-oriented interface
 * @export
 * @class CloudstoragesApi
 * @extends {BaseAPI}
 */
export class CloudstoragesApi extends BaseAPI {
    /**
     * 
     * @summary Create a cloud storage
     * @param {CloudstoragesApiCloudstoragesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudstoragesApi
     */
    public cloudstoragesCreate(requestParameters: CloudstoragesApiCloudstoragesCreateRequest, options?: RawAxiosRequestConfig) {
        return CloudstoragesApiFp(this.configuration).cloudstoragesCreate(requestParameters.cloudStorageWriteRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a cloud storage
     * @param {CloudstoragesApiCloudstoragesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudstoragesApi
     */
    public cloudstoragesDestroy(requestParameters: CloudstoragesApiCloudstoragesDestroyRequest, options?: RawAxiosRequestConfig) {
        return CloudstoragesApiFp(this.configuration).cloudstoragesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List cloud storages
     * @param {CloudstoragesApiCloudstoragesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudstoragesApi
     */
    public cloudstoragesList(requestParameters: CloudstoragesApiCloudstoragesListRequest = {}, options?: RawAxiosRequestConfig) {
        return CloudstoragesApiFp(this.configuration).cloudstoragesList(requestParameters.xOrganization, requestParameters.credentialsType, requestParameters.filter, requestParameters.name, requestParameters.org, requestParameters.orgId, requestParameters.owner, requestParameters.page, requestParameters.pageSize, requestParameters.providerType, requestParameters.resource, requestParameters.search, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a cloud storage
     * @param {CloudstoragesApiCloudstoragesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudstoragesApi
     */
    public cloudstoragesPartialUpdate(requestParameters: CloudstoragesApiCloudstoragesPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return CloudstoragesApiFp(this.configuration).cloudstoragesPartialUpdate(requestParameters.id, requestParameters.patchedCloudStorageWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get cloud storage details
     * @param {CloudstoragesApiCloudstoragesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudstoragesApi
     */
    public cloudstoragesRetrieve(requestParameters: CloudstoragesApiCloudstoragesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CloudstoragesApiFp(this.configuration).cloudstoragesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Method return allowed actions for cloud storage. It\'s required for reading/writing
     * @summary Get allowed actions for a cloud storage
     * @param {CloudstoragesApiCloudstoragesRetrieveActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudstoragesApi
     */
    public cloudstoragesRetrieveActions(requestParameters: CloudstoragesApiCloudstoragesRetrieveActionsRequest, options?: RawAxiosRequestConfig) {
        return CloudstoragesApiFp(this.configuration).cloudstoragesRetrieveActions(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get cloud storage content
     * @param {CloudstoragesApiCloudstoragesRetrieveContentV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudstoragesApi
     */
    public cloudstoragesRetrieveContentV2(requestParameters: CloudstoragesApiCloudstoragesRetrieveContentV2Request, options?: RawAxiosRequestConfig) {
        return CloudstoragesApiFp(this.configuration).cloudstoragesRetrieveContentV2(requestParameters.id, requestParameters.manifestPath, requestParameters.nextToken, requestParameters.pageSize, requestParameters.prefix, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a preview image for a cloud storage
     * @param {CloudstoragesApiCloudstoragesRetrievePreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudstoragesApi
     */
    public cloudstoragesRetrievePreview(requestParameters: CloudstoragesApiCloudstoragesRetrievePreviewRequest, options?: RawAxiosRequestConfig) {
        return CloudstoragesApiFp(this.configuration).cloudstoragesRetrievePreview(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the status of a cloud storage
     * @param {CloudstoragesApiCloudstoragesRetrieveStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudstoragesApi
     */
    public cloudstoragesRetrieveStatus(requestParameters: CloudstoragesApiCloudstoragesRetrieveStatusRequest, options?: RawAxiosRequestConfig) {
        return CloudstoragesApiFp(this.configuration).cloudstoragesRetrieveStatus(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CloudstoragesListCredentialsTypeEnum = {
    KeySecretKeyPair: 'KEY_SECRET_KEY_PAIR',
    AccountNameTokenPair: 'ACCOUNT_NAME_TOKEN_PAIR',
    KeyFilePath: 'KEY_FILE_PATH',
    AnonymousAccess: 'ANONYMOUS_ACCESS',
    ConnectionString: 'CONNECTION_STRING'
} as const;
export type CloudstoragesListCredentialsTypeEnum = typeof CloudstoragesListCredentialsTypeEnum[keyof typeof CloudstoragesListCredentialsTypeEnum];
/**
 * @export
 */
export const CloudstoragesListProviderTypeEnum = {
    AwsS3Bucket: 'AWS_S3_BUCKET',
    AzureContainer: 'AZURE_CONTAINER',
    GoogleDrive: 'GOOGLE_DRIVE',
    GoogleCloudStorage: 'GOOGLE_CLOUD_STORAGE'
} as const;
export type CloudstoragesListProviderTypeEnum = typeof CloudstoragesListProviderTypeEnum[keyof typeof CloudstoragesListProviderTypeEnum];
