/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.6.1
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnnotationFileRequest } from '../models';
// @ts-ignore
import { AnnotationsRead } from '../models';
// @ts-ignore
import { DataMetaRead } from '../models';
// @ts-ignore
import { JobAnnotationsUpdateRequest } from '../models';
// @ts-ignore
import { JobRead } from '../models';
// @ts-ignore
import { JobWriteRequest } from '../models';
// @ts-ignore
import { PaginatedJobReadList } from '../models';
// @ts-ignore
import { PatchedJobWriteRequest } from '../models';
// @ts-ignore
import { PatchedLabeledDataRequest } from '../models';
// @ts-ignore
import { RqId } from '../models';
/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Method creates a new job in the task
         * @param {JobWriteRequest} jobWriteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsCreate: async (jobWriteRequest: JobWriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobWriteRequest' is not null or undefined
            assertParamExists('jobsCreate', 'jobWriteRequest', jobWriteRequest)
            const localVarPath = `/api/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  The request POST /api/jobs/id/annotations will initiate file upload and will create the rq job on the server in which the process of annotations uploading from file will be carried out. Please, use the PUT /api/jobs/id/annotations endpoint for checking status of the process. 
         * @summary Method allows to initialize the process of the job annotation upload from a local file or a cloud storage
         * @param {number} id A unique integer value identifying this job.
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Annotation file name
         * @param {string} [format] Input format name You can get the list of supported formats at: /server/annotation/formats
         * @param {JobsCreateAnnotationsLocationEnum} [location] where to import the annotation from
         * @param {boolean} [useDefaultLocation] Use the location that was configured in the task to import annotation
         * @param {AnnotationFileRequest} [annotationFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsCreateAnnotations: async (id: number, cloudStorageId?: number, filename?: string, format?: string, location?: JobsCreateAnnotationsLocationEnum, useDefaultLocation?: boolean, annotationFileRequest?: AnnotationFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsCreateAnnotations', 'id', id)
            const localVarPath = `/api/jobs/{id}/annotations/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (cloudStorageId !== undefined) {
                localVarQueryParameter['cloud_storage_id'] = cloudStorageId;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (useDefaultLocation !== undefined) {
                localVarQueryParameter['use_default_location'] = useDefaultLocation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(annotationFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Please note, that not every job can be removed. Currently, it is only available for Ground Truth jobs. 
         * @summary Method deletes a job and its related annotations
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsDestroy', 'id', id)
            const localVarPath = `/api/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method deletes all annotations for a specific job
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsDestroyAnnotations: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsDestroyAnnotations', 'id', id)
            const localVarPath = `/api/jobs/{id}/annotations/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns a paginated list of jobs
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [assignee] A simple equality filter for the assignee field
         * @param {JobsListDimensionEnum} [dimension] A simple equality filter for the dimension field
         * @param {string} [filter] A filter term. Available filter_fields: [\&#39;task_name\&#39;, \&#39;project_name\&#39;, \&#39;assignee\&#39;, \&#39;state\&#39;, \&#39;stage\&#39;, \&#39;id\&#39;, \&#39;task_id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;, \&#39;dimension\&#39;, \&#39;type\&#39;]
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [projectId] A simple equality filter for the project_id field
         * @param {string} [projectName] A simple equality filter for the project_name field
         * @param {string} [search] A search term. Available search_fields: (\&#39;task_name\&#39;, \&#39;project_name\&#39;, \&#39;assignee\&#39;, \&#39;state\&#39;, \&#39;stage\&#39;)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;task_name\&#39;, \&#39;project_name\&#39;, \&#39;assignee\&#39;, \&#39;state\&#39;, \&#39;stage\&#39;, \&#39;id\&#39;, \&#39;task_id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;, \&#39;dimension\&#39;, \&#39;type\&#39;]
         * @param {JobsListStageEnum} [stage] A simple equality filter for the stage field
         * @param {JobsListStateEnum} [state] A simple equality filter for the state field
         * @param {number} [taskId] A simple equality filter for the task_id field
         * @param {string} [taskName] A simple equality filter for the task_name field
         * @param {JobsListTypeEnum} [type] A simple equality filter for the type field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsList: async (xOrganization?: string, assignee?: string, dimension?: JobsListDimensionEnum, filter?: string, org?: string, orgId?: number, page?: number, pageSize?: number, projectId?: number, projectName?: string, search?: string, sort?: string, stage?: JobsListStageEnum, state?: JobsListStateEnum, taskId?: number, taskName?: string, type?: JobsListTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (assignee !== undefined) {
                localVarQueryParameter['assignee'] = assignee;
            }

            if (dimension !== undefined) {
                localVarQueryParameter['dimension'] = dimension;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (stage !== undefined) {
                localVarQueryParameter['stage'] = stage;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['task_name'] = taskName;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in a job
         * @param {number} id A unique integer value identifying this job.
         * @param {PatchedJobWriteRequest} [patchedJobWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsPartialUpdate: async (id: number, patchedJobWriteRequest?: PatchedJobWriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsPartialUpdate', 'id', id)
            const localVarPath = `/api/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedJobWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method performs a partial update of annotations in a specific job
         * @param {JobsPartialUpdateAnnotationsActionEnum} action 
         * @param {number} id A unique integer value identifying this job.
         * @param {PatchedLabeledDataRequest} [patchedLabeledDataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsPartialUpdateAnnotations: async (action: JobsPartialUpdateAnnotationsActionEnum, id: number, patchedLabeledDataRequest?: PatchedLabeledDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('jobsPartialUpdateAnnotations', 'action', action)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsPartialUpdateAnnotations', 'id', id)
            const localVarPath = `/api/jobs/{id}/annotations/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedLabeledDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns details of a job
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsRetrieve', 'id', id)
            const localVarPath = `/api/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns annotations for a specific job as a JSON document. If format is specified, a zip archive is returned.
         * @param {number} id A unique integer value identifying this job.
         * @param {JobsRetrieveAnnotationsActionEnum} [action] Used to start downloading process after annotation file had been created
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Desired output file name
         * @param {string} [format] Desired output format name You can get the list of supported formats at: /server/annotation/formats
         * @param {JobsRetrieveAnnotationsLocationEnum} [location] Where need to save downloaded annotation
         * @param {boolean} [useDefaultLocation] Use the location that was configured in the task to export annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrieveAnnotations: async (id: number, action?: JobsRetrieveAnnotationsActionEnum, cloudStorageId?: number, filename?: string, format?: string, location?: JobsRetrieveAnnotationsLocationEnum, useDefaultLocation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsRetrieveAnnotations', 'id', id)
            const localVarPath = `/api/jobs/{id}/annotations/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (cloudStorageId !== undefined) {
                localVarQueryParameter['cloud_storage_id'] = cloudStorageId;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (useDefaultLocation !== undefined) {
                localVarQueryParameter['use_default_location'] = useDefaultLocation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns data for a specific job
         * @param {number} id A unique integer value identifying this job.
         * @param {number} [number] A unique number value identifying chunk or frame
         * @param {JobsRetrieveDataQualityEnum} [quality] Specifies the quality level of the requested data
         * @param {JobsRetrieveDataTypeEnum} [type] Specifies the type of the requested data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrieveData: async (id: number, number?: number, quality?: JobsRetrieveDataQualityEnum, type?: JobsRetrieveDataTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsRetrieveData', 'id', id)
            const localVarPath = `/api/jobs/{id}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method provides a meta information about media files which are related with the job
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrieveDataMeta: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsRetrieveDataMeta', 'id', id)
            const localVarPath = `/api/jobs/{id}/data/meta`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export job as a dataset in a specific format
         * @param {string} format Desired output format name You can get the list of supported formats at: /server/annotation/formats
         * @param {number} id A unique integer value identifying this job.
         * @param {JobsRetrieveDatasetActionEnum} [action] Used to start downloading process after annotation file had been created
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Desired output file name
         * @param {JobsRetrieveDatasetLocationEnum} [location] Where need to save downloaded dataset
         * @param {boolean} [useDefaultLocation] Use the location that was configured in the task to export dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrieveDataset: async (format: string, id: number, action?: JobsRetrieveDatasetActionEnum, cloudStorageId?: number, filename?: string, location?: JobsRetrieveDatasetLocationEnum, useDefaultLocation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('jobsRetrieveDataset', 'format', format)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsRetrieveDataset', 'id', id)
            const localVarPath = `/api/jobs/{id}/dataset`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (cloudStorageId !== undefined) {
                localVarQueryParameter['cloud_storage_id'] = cloudStorageId;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (useDefaultLocation !== undefined) {
                localVarQueryParameter['use_default_location'] = useDefaultLocation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns a preview image for the job
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrievePreview: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsRetrievePreview', 'id', id)
            const localVarPath = `/api/jobs/{id}/preview`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  To check the status of the process of uploading a job annotations from a file:  After initiating the annotations upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent PUT /api/jobs/id/annotations requests to track the status of the annotations upload. 
         * @summary Method performs an update of all annotations in a specific job or used for uploading annotations from a file
         * @param {number} id A unique integer value identifying this job.
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Annotation file name
         * @param {string} [format] Input format name You can get the list of supported formats at: /server/annotation/formats
         * @param {JobsUpdateAnnotationsLocationEnum} [location] where to import the annotation from
         * @param {string} [rqId] rq id
         * @param {boolean} [useDefaultLocation] Use the location that was configured in the task to import annotation
         * @param {JobAnnotationsUpdateRequest} [jobAnnotationsUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsUpdateAnnotations: async (id: number, cloudStorageId?: number, filename?: string, format?: string, location?: JobsUpdateAnnotationsLocationEnum, rqId?: string, useDefaultLocation?: boolean, jobAnnotationsUpdateRequest?: JobAnnotationsUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsUpdateAnnotations', 'id', id)
            const localVarPath = `/api/jobs/{id}/annotations/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (cloudStorageId !== undefined) {
                localVarQueryParameter['cloud_storage_id'] = cloudStorageId;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (rqId !== undefined) {
                localVarQueryParameter['rq_id'] = rqId;
            }

            if (useDefaultLocation !== undefined) {
                localVarQueryParameter['use_default_location'] = useDefaultLocation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobAnnotationsUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Method creates a new job in the task
         * @param {JobWriteRequest} jobWriteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsCreate(jobWriteRequest: JobWriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsCreate(jobWriteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  The request POST /api/jobs/id/annotations will initiate file upload and will create the rq job on the server in which the process of annotations uploading from file will be carried out. Please, use the PUT /api/jobs/id/annotations endpoint for checking status of the process. 
         * @summary Method allows to initialize the process of the job annotation upload from a local file or a cloud storage
         * @param {number} id A unique integer value identifying this job.
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Annotation file name
         * @param {string} [format] Input format name You can get the list of supported formats at: /server/annotation/formats
         * @param {JobsCreateAnnotationsLocationEnum} [location] where to import the annotation from
         * @param {boolean} [useDefaultLocation] Use the location that was configured in the task to import annotation
         * @param {AnnotationFileRequest} [annotationFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsCreateAnnotations(id: number, cloudStorageId?: number, filename?: string, format?: string, location?: JobsCreateAnnotationsLocationEnum, useDefaultLocation?: boolean, annotationFileRequest?: AnnotationFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsCreateAnnotations(id, cloudStorageId, filename, format, location, useDefaultLocation, annotationFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Please note, that not every job can be removed. Currently, it is only available for Ground Truth jobs. 
         * @summary Method deletes a job and its related annotations
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method deletes all annotations for a specific job
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsDestroyAnnotations(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsDestroyAnnotations(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns a paginated list of jobs
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [assignee] A simple equality filter for the assignee field
         * @param {JobsListDimensionEnum} [dimension] A simple equality filter for the dimension field
         * @param {string} [filter] A filter term. Available filter_fields: [\&#39;task_name\&#39;, \&#39;project_name\&#39;, \&#39;assignee\&#39;, \&#39;state\&#39;, \&#39;stage\&#39;, \&#39;id\&#39;, \&#39;task_id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;, \&#39;dimension\&#39;, \&#39;type\&#39;]
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [projectId] A simple equality filter for the project_id field
         * @param {string} [projectName] A simple equality filter for the project_name field
         * @param {string} [search] A search term. Available search_fields: (\&#39;task_name\&#39;, \&#39;project_name\&#39;, \&#39;assignee\&#39;, \&#39;state\&#39;, \&#39;stage\&#39;)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;task_name\&#39;, \&#39;project_name\&#39;, \&#39;assignee\&#39;, \&#39;state\&#39;, \&#39;stage\&#39;, \&#39;id\&#39;, \&#39;task_id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;, \&#39;dimension\&#39;, \&#39;type\&#39;]
         * @param {JobsListStageEnum} [stage] A simple equality filter for the stage field
         * @param {JobsListStateEnum} [state] A simple equality filter for the state field
         * @param {number} [taskId] A simple equality filter for the task_id field
         * @param {string} [taskName] A simple equality filter for the task_name field
         * @param {JobsListTypeEnum} [type] A simple equality filter for the type field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsList(xOrganization?: string, assignee?: string, dimension?: JobsListDimensionEnum, filter?: string, org?: string, orgId?: number, page?: number, pageSize?: number, projectId?: number, projectName?: string, search?: string, sort?: string, stage?: JobsListStageEnum, state?: JobsListStateEnum, taskId?: number, taskName?: string, type?: JobsListTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobReadList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsList(xOrganization, assignee, dimension, filter, org, orgId, page, pageSize, projectId, projectName, search, sort, stage, state, taskId, taskName, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in a job
         * @param {number} id A unique integer value identifying this job.
         * @param {PatchedJobWriteRequest} [patchedJobWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsPartialUpdate(id: number, patchedJobWriteRequest?: PatchedJobWriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsPartialUpdate(id, patchedJobWriteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method performs a partial update of annotations in a specific job
         * @param {JobsPartialUpdateAnnotationsActionEnum} action 
         * @param {number} id A unique integer value identifying this job.
         * @param {PatchedLabeledDataRequest} [patchedLabeledDataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsPartialUpdateAnnotations(action: JobsPartialUpdateAnnotationsActionEnum, id: number, patchedLabeledDataRequest?: PatchedLabeledDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsPartialUpdateAnnotations(action, id, patchedLabeledDataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns details of a job
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns annotations for a specific job as a JSON document. If format is specified, a zip archive is returned.
         * @param {number} id A unique integer value identifying this job.
         * @param {JobsRetrieveAnnotationsActionEnum} [action] Used to start downloading process after annotation file had been created
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Desired output file name
         * @param {string} [format] Desired output format name You can get the list of supported formats at: /server/annotation/formats
         * @param {JobsRetrieveAnnotationsLocationEnum} [location] Where need to save downloaded annotation
         * @param {boolean} [useDefaultLocation] Use the location that was configured in the task to export annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsRetrieveAnnotations(id: number, action?: JobsRetrieveAnnotationsActionEnum, cloudStorageId?: number, filename?: string, format?: string, location?: JobsRetrieveAnnotationsLocationEnum, useDefaultLocation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationsRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsRetrieveAnnotations(id, action, cloudStorageId, filename, format, location, useDefaultLocation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns data for a specific job
         * @param {number} id A unique integer value identifying this job.
         * @param {number} [number] A unique number value identifying chunk or frame
         * @param {JobsRetrieveDataQualityEnum} [quality] Specifies the quality level of the requested data
         * @param {JobsRetrieveDataTypeEnum} [type] Specifies the type of the requested data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsRetrieveData(id: number, number?: number, quality?: JobsRetrieveDataQualityEnum, type?: JobsRetrieveDataTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsRetrieveData(id, number, quality, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method provides a meta information about media files which are related with the job
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsRetrieveDataMeta(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataMetaRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsRetrieveDataMeta(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Export job as a dataset in a specific format
         * @param {string} format Desired output format name You can get the list of supported formats at: /server/annotation/formats
         * @param {number} id A unique integer value identifying this job.
         * @param {JobsRetrieveDatasetActionEnum} [action] Used to start downloading process after annotation file had been created
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Desired output file name
         * @param {JobsRetrieveDatasetLocationEnum} [location] Where need to save downloaded dataset
         * @param {boolean} [useDefaultLocation] Use the location that was configured in the task to export dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsRetrieveDataset(format: string, id: number, action?: JobsRetrieveDatasetActionEnum, cloudStorageId?: number, filename?: string, location?: JobsRetrieveDatasetLocationEnum, useDefaultLocation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsRetrieveDataset(format, id, action, cloudStorageId, filename, location, useDefaultLocation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns a preview image for the job
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsRetrievePreview(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsRetrievePreview(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  To check the status of the process of uploading a job annotations from a file:  After initiating the annotations upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent PUT /api/jobs/id/annotations requests to track the status of the annotations upload. 
         * @summary Method performs an update of all annotations in a specific job or used for uploading annotations from a file
         * @param {number} id A unique integer value identifying this job.
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Annotation file name
         * @param {string} [format] Input format name You can get the list of supported formats at: /server/annotation/formats
         * @param {JobsUpdateAnnotationsLocationEnum} [location] where to import the annotation from
         * @param {string} [rqId] rq id
         * @param {boolean} [useDefaultLocation] Use the location that was configured in the task to import annotation
         * @param {JobAnnotationsUpdateRequest} [jobAnnotationsUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsUpdateAnnotations(id: number, cloudStorageId?: number, filename?: string, format?: string, location?: JobsUpdateAnnotationsLocationEnum, rqId?: string, useDefaultLocation?: boolean, jobAnnotationsUpdateRequest?: JobAnnotationsUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsUpdateAnnotations(id, cloudStorageId, filename, format, location, rqId, useDefaultLocation, jobAnnotationsUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * 
         * @summary Method creates a new job in the task
         * @param {JobsApiJobsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsCreate(requestParameters: JobsApiJobsCreateRequest, options?: AxiosRequestConfig): AxiosPromise<JobRead> {
            return localVarFp.jobsCreate(requestParameters.jobWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  The request POST /api/jobs/id/annotations will initiate file upload and will create the rq job on the server in which the process of annotations uploading from file will be carried out. Please, use the PUT /api/jobs/id/annotations endpoint for checking status of the process. 
         * @summary Method allows to initialize the process of the job annotation upload from a local file or a cloud storage
         * @param {JobsApiJobsCreateAnnotationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsCreateAnnotations(requestParameters: JobsApiJobsCreateAnnotationsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsCreateAnnotations(requestParameters.id, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.format, requestParameters.location, requestParameters.useDefaultLocation, requestParameters.annotationFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Please note, that not every job can be removed. Currently, it is only available for Ground Truth jobs. 
         * @summary Method deletes a job and its related annotations
         * @param {JobsApiJobsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsDestroy(requestParameters: JobsApiJobsDestroyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method deletes all annotations for a specific job
         * @param {JobsApiJobsDestroyAnnotationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsDestroyAnnotations(requestParameters: JobsApiJobsDestroyAnnotationsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsDestroyAnnotations(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns a paginated list of jobs
         * @param {JobsApiJobsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsList(requestParameters: JobsApiJobsListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedJobReadList> {
            return localVarFp.jobsList(requestParameters.xOrganization, requestParameters.assignee, requestParameters.dimension, requestParameters.filter, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.projectId, requestParameters.projectName, requestParameters.search, requestParameters.sort, requestParameters.stage, requestParameters.state, requestParameters.taskId, requestParameters.taskName, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in a job
         * @param {JobsApiJobsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsPartialUpdate(requestParameters: JobsApiJobsPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<JobRead> {
            return localVarFp.jobsPartialUpdate(requestParameters.id, requestParameters.patchedJobWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method performs a partial update of annotations in a specific job
         * @param {JobsApiJobsPartialUpdateAnnotationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsPartialUpdateAnnotations(requestParameters: JobsApiJobsPartialUpdateAnnotationsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsPartialUpdateAnnotations(requestParameters.action, requestParameters.id, requestParameters.patchedLabeledDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns details of a job
         * @param {JobsApiJobsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrieve(requestParameters: JobsApiJobsRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<JobRead> {
            return localVarFp.jobsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns annotations for a specific job as a JSON document. If format is specified, a zip archive is returned.
         * @param {JobsApiJobsRetrieveAnnotationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrieveAnnotations(requestParameters: JobsApiJobsRetrieveAnnotationsRequest, options?: AxiosRequestConfig): AxiosPromise<AnnotationsRead> {
            return localVarFp.jobsRetrieveAnnotations(requestParameters.id, requestParameters.action, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.format, requestParameters.location, requestParameters.useDefaultLocation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns data for a specific job
         * @param {JobsApiJobsRetrieveDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrieveData(requestParameters: JobsApiJobsRetrieveDataRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.jobsRetrieveData(requestParameters.id, requestParameters.number, requestParameters.quality, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method provides a meta information about media files which are related with the job
         * @param {JobsApiJobsRetrieveDataMetaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrieveDataMeta(requestParameters: JobsApiJobsRetrieveDataMetaRequest, options?: AxiosRequestConfig): AxiosPromise<DataMetaRead> {
            return localVarFp.jobsRetrieveDataMeta(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export job as a dataset in a specific format
         * @param {JobsApiJobsRetrieveDatasetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrieveDataset(requestParameters: JobsApiJobsRetrieveDatasetRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.jobsRetrieveDataset(requestParameters.format, requestParameters.id, requestParameters.action, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, requestParameters.useDefaultLocation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns a preview image for the job
         * @param {JobsApiJobsRetrievePreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsRetrievePreview(requestParameters: JobsApiJobsRetrievePreviewRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsRetrievePreview(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *  To check the status of the process of uploading a job annotations from a file:  After initiating the annotations upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent PUT /api/jobs/id/annotations requests to track the status of the annotations upload. 
         * @summary Method performs an update of all annotations in a specific job or used for uploading annotations from a file
         * @param {JobsApiJobsUpdateAnnotationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsUpdateAnnotations(requestParameters: JobsApiJobsUpdateAnnotationsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsUpdateAnnotations(requestParameters.id, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.format, requestParameters.location, requestParameters.rqId, requestParameters.useDefaultLocation, requestParameters.jobAnnotationsUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for jobsCreate operation in JobsApi.
 * @export
 * @interface JobsApiJobsCreateRequest
 */
export interface JobsApiJobsCreateRequest {
    /**
     * 
     * @type {JobWriteRequest}
     * @memberof JobsApiJobsCreate
     */
    readonly jobWriteRequest: JobWriteRequest
}

/**
 * Request parameters for jobsCreateAnnotations operation in JobsApi.
 * @export
 * @interface JobsApiJobsCreateAnnotationsRequest
 */
export interface JobsApiJobsCreateAnnotationsRequest {
    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsCreateAnnotations
     */
    readonly id: number

    /**
     * Storage id
     * @type {number}
     * @memberof JobsApiJobsCreateAnnotations
     */
    readonly cloudStorageId?: number

    /**
     * Annotation file name
     * @type {string}
     * @memberof JobsApiJobsCreateAnnotations
     */
    readonly filename?: string

    /**
     * Input format name You can get the list of supported formats at: /server/annotation/formats
     * @type {string}
     * @memberof JobsApiJobsCreateAnnotations
     */
    readonly format?: string

    /**
     * where to import the annotation from
     * @type {'cloud_storage' | 'local'}
     * @memberof JobsApiJobsCreateAnnotations
     */
    readonly location?: JobsCreateAnnotationsLocationEnum

    /**
     * Use the location that was configured in the task to import annotation
     * @type {boolean}
     * @memberof JobsApiJobsCreateAnnotations
     */
    readonly useDefaultLocation?: boolean

    /**
     * 
     * @type {AnnotationFileRequest}
     * @memberof JobsApiJobsCreateAnnotations
     */
    readonly annotationFileRequest?: AnnotationFileRequest
}

/**
 * Request parameters for jobsDestroy operation in JobsApi.
 * @export
 * @interface JobsApiJobsDestroyRequest
 */
export interface JobsApiJobsDestroyRequest {
    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for jobsDestroyAnnotations operation in JobsApi.
 * @export
 * @interface JobsApiJobsDestroyAnnotationsRequest
 */
export interface JobsApiJobsDestroyAnnotationsRequest {
    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsDestroyAnnotations
     */
    readonly id: number
}

/**
 * Request parameters for jobsList operation in JobsApi.
 * @export
 * @interface JobsApiJobsListRequest
 */
export interface JobsApiJobsListRequest {
    /**
     * Organization unique slug
     * @type {string}
     * @memberof JobsApiJobsList
     */
    readonly xOrganization?: string

    /**
     * A simple equality filter for the assignee field
     * @type {string}
     * @memberof JobsApiJobsList
     */
    readonly assignee?: string

    /**
     * A simple equality filter for the dimension field
     * @type {'3d' | '2d'}
     * @memberof JobsApiJobsList
     */
    readonly dimension?: JobsListDimensionEnum

    /**
     * A filter term. Available filter_fields: [\&#39;task_name\&#39;, \&#39;project_name\&#39;, \&#39;assignee\&#39;, \&#39;state\&#39;, \&#39;stage\&#39;, \&#39;id\&#39;, \&#39;task_id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;, \&#39;dimension\&#39;, \&#39;type\&#39;]
     * @type {string}
     * @memberof JobsApiJobsList
     */
    readonly filter?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof JobsApiJobsList
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof JobsApiJobsList
     */
    readonly orgId?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof JobsApiJobsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof JobsApiJobsList
     */
    readonly pageSize?: number

    /**
     * A simple equality filter for the project_id field
     * @type {number}
     * @memberof JobsApiJobsList
     */
    readonly projectId?: number

    /**
     * A simple equality filter for the project_name field
     * @type {string}
     * @memberof JobsApiJobsList
     */
    readonly projectName?: string

    /**
     * A search term. Available search_fields: (\&#39;task_name\&#39;, \&#39;project_name\&#39;, \&#39;assignee\&#39;, \&#39;state\&#39;, \&#39;stage\&#39;)
     * @type {string}
     * @memberof JobsApiJobsList
     */
    readonly search?: string

    /**
     * Which field to use when ordering the results. Available ordering_fields: [\&#39;task_name\&#39;, \&#39;project_name\&#39;, \&#39;assignee\&#39;, \&#39;state\&#39;, \&#39;stage\&#39;, \&#39;id\&#39;, \&#39;task_id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;, \&#39;dimension\&#39;, \&#39;type\&#39;]
     * @type {string}
     * @memberof JobsApiJobsList
     */
    readonly sort?: string

    /**
     * A simple equality filter for the stage field
     * @type {'annotation' | 'validation' | 'acceptance'}
     * @memberof JobsApiJobsList
     */
    readonly stage?: JobsListStageEnum

    /**
     * A simple equality filter for the state field
     * @type {'new' | 'in progress' | 'completed' | 'rejected'}
     * @memberof JobsApiJobsList
     */
    readonly state?: JobsListStateEnum

    /**
     * A simple equality filter for the task_id field
     * @type {number}
     * @memberof JobsApiJobsList
     */
    readonly taskId?: number

    /**
     * A simple equality filter for the task_name field
     * @type {string}
     * @memberof JobsApiJobsList
     */
    readonly taskName?: string

    /**
     * A simple equality filter for the type field
     * @type {'annotation' | 'ground_truth'}
     * @memberof JobsApiJobsList
     */
    readonly type?: JobsListTypeEnum
}

/**
 * Request parameters for jobsPartialUpdate operation in JobsApi.
 * @export
 * @interface JobsApiJobsPartialUpdateRequest
 */
export interface JobsApiJobsPartialUpdateRequest {
    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedJobWriteRequest}
     * @memberof JobsApiJobsPartialUpdate
     */
    readonly patchedJobWriteRequest?: PatchedJobWriteRequest
}

/**
 * Request parameters for jobsPartialUpdateAnnotations operation in JobsApi.
 * @export
 * @interface JobsApiJobsPartialUpdateAnnotationsRequest
 */
export interface JobsApiJobsPartialUpdateAnnotationsRequest {
    /**
     * 
     * @type {'create' | 'delete' | 'update'}
     * @memberof JobsApiJobsPartialUpdateAnnotations
     */
    readonly action: JobsPartialUpdateAnnotationsActionEnum

    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsPartialUpdateAnnotations
     */
    readonly id: number

    /**
     * 
     * @type {PatchedLabeledDataRequest}
     * @memberof JobsApiJobsPartialUpdateAnnotations
     */
    readonly patchedLabeledDataRequest?: PatchedLabeledDataRequest
}

/**
 * Request parameters for jobsRetrieve operation in JobsApi.
 * @export
 * @interface JobsApiJobsRetrieveRequest
 */
export interface JobsApiJobsRetrieveRequest {
    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for jobsRetrieveAnnotations operation in JobsApi.
 * @export
 * @interface JobsApiJobsRetrieveAnnotationsRequest
 */
export interface JobsApiJobsRetrieveAnnotationsRequest {
    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsRetrieveAnnotations
     */
    readonly id: number

    /**
     * Used to start downloading process after annotation file had been created
     * @type {'download'}
     * @memberof JobsApiJobsRetrieveAnnotations
     */
    readonly action?: JobsRetrieveAnnotationsActionEnum

    /**
     * Storage id
     * @type {number}
     * @memberof JobsApiJobsRetrieveAnnotations
     */
    readonly cloudStorageId?: number

    /**
     * Desired output file name
     * @type {string}
     * @memberof JobsApiJobsRetrieveAnnotations
     */
    readonly filename?: string

    /**
     * Desired output format name You can get the list of supported formats at: /server/annotation/formats
     * @type {string}
     * @memberof JobsApiJobsRetrieveAnnotations
     */
    readonly format?: string

    /**
     * Where need to save downloaded annotation
     * @type {'cloud_storage' | 'local'}
     * @memberof JobsApiJobsRetrieveAnnotations
     */
    readonly location?: JobsRetrieveAnnotationsLocationEnum

    /**
     * Use the location that was configured in the task to export annotation
     * @type {boolean}
     * @memberof JobsApiJobsRetrieveAnnotations
     */
    readonly useDefaultLocation?: boolean
}

/**
 * Request parameters for jobsRetrieveData operation in JobsApi.
 * @export
 * @interface JobsApiJobsRetrieveDataRequest
 */
export interface JobsApiJobsRetrieveDataRequest {
    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsRetrieveData
     */
    readonly id: number

    /**
     * A unique number value identifying chunk or frame
     * @type {number}
     * @memberof JobsApiJobsRetrieveData
     */
    readonly number?: number

    /**
     * Specifies the quality level of the requested data
     * @type {'compressed' | 'original'}
     * @memberof JobsApiJobsRetrieveData
     */
    readonly quality?: JobsRetrieveDataQualityEnum

    /**
     * Specifies the type of the requested data
     * @type {'chunk' | 'context_image' | 'frame'}
     * @memberof JobsApiJobsRetrieveData
     */
    readonly type?: JobsRetrieveDataTypeEnum
}

/**
 * Request parameters for jobsRetrieveDataMeta operation in JobsApi.
 * @export
 * @interface JobsApiJobsRetrieveDataMetaRequest
 */
export interface JobsApiJobsRetrieveDataMetaRequest {
    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsRetrieveDataMeta
     */
    readonly id: number
}

/**
 * Request parameters for jobsRetrieveDataset operation in JobsApi.
 * @export
 * @interface JobsApiJobsRetrieveDatasetRequest
 */
export interface JobsApiJobsRetrieveDatasetRequest {
    /**
     * Desired output format name You can get the list of supported formats at: /server/annotation/formats
     * @type {string}
     * @memberof JobsApiJobsRetrieveDataset
     */
    readonly format: string

    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsRetrieveDataset
     */
    readonly id: number

    /**
     * Used to start downloading process after annotation file had been created
     * @type {'download'}
     * @memberof JobsApiJobsRetrieveDataset
     */
    readonly action?: JobsRetrieveDatasetActionEnum

    /**
     * Storage id
     * @type {number}
     * @memberof JobsApiJobsRetrieveDataset
     */
    readonly cloudStorageId?: number

    /**
     * Desired output file name
     * @type {string}
     * @memberof JobsApiJobsRetrieveDataset
     */
    readonly filename?: string

    /**
     * Where need to save downloaded dataset
     * @type {'cloud_storage' | 'local'}
     * @memberof JobsApiJobsRetrieveDataset
     */
    readonly location?: JobsRetrieveDatasetLocationEnum

    /**
     * Use the location that was configured in the task to export dataset
     * @type {boolean}
     * @memberof JobsApiJobsRetrieveDataset
     */
    readonly useDefaultLocation?: boolean
}

/**
 * Request parameters for jobsRetrievePreview operation in JobsApi.
 * @export
 * @interface JobsApiJobsRetrievePreviewRequest
 */
export interface JobsApiJobsRetrievePreviewRequest {
    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsRetrievePreview
     */
    readonly id: number
}

/**
 * Request parameters for jobsUpdateAnnotations operation in JobsApi.
 * @export
 * @interface JobsApiJobsUpdateAnnotationsRequest
 */
export interface JobsApiJobsUpdateAnnotationsRequest {
    /**
     * A unique integer value identifying this job.
     * @type {number}
     * @memberof JobsApiJobsUpdateAnnotations
     */
    readonly id: number

    /**
     * Storage id
     * @type {number}
     * @memberof JobsApiJobsUpdateAnnotations
     */
    readonly cloudStorageId?: number

    /**
     * Annotation file name
     * @type {string}
     * @memberof JobsApiJobsUpdateAnnotations
     */
    readonly filename?: string

    /**
     * Input format name You can get the list of supported formats at: /server/annotation/formats
     * @type {string}
     * @memberof JobsApiJobsUpdateAnnotations
     */
    readonly format?: string

    /**
     * where to import the annotation from
     * @type {'cloud_storage' | 'local'}
     * @memberof JobsApiJobsUpdateAnnotations
     */
    readonly location?: JobsUpdateAnnotationsLocationEnum

    /**
     * rq id
     * @type {string}
     * @memberof JobsApiJobsUpdateAnnotations
     */
    readonly rqId?: string

    /**
     * Use the location that was configured in the task to import annotation
     * @type {boolean}
     * @memberof JobsApiJobsUpdateAnnotations
     */
    readonly useDefaultLocation?: boolean

    /**
     * 
     * @type {JobAnnotationsUpdateRequest}
     * @memberof JobsApiJobsUpdateAnnotations
     */
    readonly jobAnnotationsUpdateRequest?: JobAnnotationsUpdateRequest
}

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * 
     * @summary Method creates a new job in the task
     * @param {JobsApiJobsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsCreate(requestParameters: JobsApiJobsCreateRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsCreate(requestParameters.jobWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  The request POST /api/jobs/id/annotations will initiate file upload and will create the rq job on the server in which the process of annotations uploading from file will be carried out. Please, use the PUT /api/jobs/id/annotations endpoint for checking status of the process. 
     * @summary Method allows to initialize the process of the job annotation upload from a local file or a cloud storage
     * @param {JobsApiJobsCreateAnnotationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsCreateAnnotations(requestParameters: JobsApiJobsCreateAnnotationsRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsCreateAnnotations(requestParameters.id, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.format, requestParameters.location, requestParameters.useDefaultLocation, requestParameters.annotationFileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Please note, that not every job can be removed. Currently, it is only available for Ground Truth jobs. 
     * @summary Method deletes a job and its related annotations
     * @param {JobsApiJobsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsDestroy(requestParameters: JobsApiJobsDestroyRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method deletes all annotations for a specific job
     * @param {JobsApiJobsDestroyAnnotationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsDestroyAnnotations(requestParameters: JobsApiJobsDestroyAnnotationsRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsDestroyAnnotations(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns a paginated list of jobs
     * @param {JobsApiJobsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsList(requestParameters: JobsApiJobsListRequest = {}, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsList(requestParameters.xOrganization, requestParameters.assignee, requestParameters.dimension, requestParameters.filter, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.projectId, requestParameters.projectName, requestParameters.search, requestParameters.sort, requestParameters.stage, requestParameters.state, requestParameters.taskId, requestParameters.taskName, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Methods does a partial update of chosen fields in a job
     * @param {JobsApiJobsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsPartialUpdate(requestParameters: JobsApiJobsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsPartialUpdate(requestParameters.id, requestParameters.patchedJobWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method performs a partial update of annotations in a specific job
     * @param {JobsApiJobsPartialUpdateAnnotationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsPartialUpdateAnnotations(requestParameters: JobsApiJobsPartialUpdateAnnotationsRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsPartialUpdateAnnotations(requestParameters.action, requestParameters.id, requestParameters.patchedLabeledDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns details of a job
     * @param {JobsApiJobsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsRetrieve(requestParameters: JobsApiJobsRetrieveRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns annotations for a specific job as a JSON document. If format is specified, a zip archive is returned.
     * @param {JobsApiJobsRetrieveAnnotationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsRetrieveAnnotations(requestParameters: JobsApiJobsRetrieveAnnotationsRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsRetrieveAnnotations(requestParameters.id, requestParameters.action, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.format, requestParameters.location, requestParameters.useDefaultLocation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns data for a specific job
     * @param {JobsApiJobsRetrieveDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsRetrieveData(requestParameters: JobsApiJobsRetrieveDataRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsRetrieveData(requestParameters.id, requestParameters.number, requestParameters.quality, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method provides a meta information about media files which are related with the job
     * @param {JobsApiJobsRetrieveDataMetaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsRetrieveDataMeta(requestParameters: JobsApiJobsRetrieveDataMetaRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsRetrieveDataMeta(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export job as a dataset in a specific format
     * @param {JobsApiJobsRetrieveDatasetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsRetrieveDataset(requestParameters: JobsApiJobsRetrieveDatasetRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsRetrieveDataset(requestParameters.format, requestParameters.id, requestParameters.action, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, requestParameters.useDefaultLocation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns a preview image for the job
     * @param {JobsApiJobsRetrievePreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsRetrievePreview(requestParameters: JobsApiJobsRetrievePreviewRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsRetrievePreview(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  To check the status of the process of uploading a job annotations from a file:  After initiating the annotations upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent PUT /api/jobs/id/annotations requests to track the status of the annotations upload. 
     * @summary Method performs an update of all annotations in a specific job or used for uploading annotations from a file
     * @param {JobsApiJobsUpdateAnnotationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsUpdateAnnotations(requestParameters: JobsApiJobsUpdateAnnotationsRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).jobsUpdateAnnotations(requestParameters.id, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.format, requestParameters.location, requestParameters.rqId, requestParameters.useDefaultLocation, requestParameters.jobAnnotationsUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const JobsCreateAnnotationsLocationEnum = {
    CloudStorage: 'cloud_storage',
    Local: 'local'
} as const;
export type JobsCreateAnnotationsLocationEnum = typeof JobsCreateAnnotationsLocationEnum[keyof typeof JobsCreateAnnotationsLocationEnum];
/**
 * @export
 */
export const JobsListDimensionEnum = {
    _3d: '3d',
    _2d: '2d'
} as const;
export type JobsListDimensionEnum = typeof JobsListDimensionEnum[keyof typeof JobsListDimensionEnum];
/**
 * @export
 */
export const JobsListStageEnum = {
    Annotation: 'annotation',
    Validation: 'validation',
    Acceptance: 'acceptance'
} as const;
export type JobsListStageEnum = typeof JobsListStageEnum[keyof typeof JobsListStageEnum];
/**
 * @export
 */
export const JobsListStateEnum = {
    New: 'new',
    InProgress: 'in progress',
    Completed: 'completed',
    Rejected: 'rejected'
} as const;
export type JobsListStateEnum = typeof JobsListStateEnum[keyof typeof JobsListStateEnum];
/**
 * @export
 */
export const JobsListTypeEnum = {
    Annotation: 'annotation',
    GroundTruth: 'ground_truth'
} as const;
export type JobsListTypeEnum = typeof JobsListTypeEnum[keyof typeof JobsListTypeEnum];
/**
 * @export
 */
export const JobsPartialUpdateAnnotationsActionEnum = {
    Create: 'create',
    Delete: 'delete',
    Update: 'update'
} as const;
export type JobsPartialUpdateAnnotationsActionEnum = typeof JobsPartialUpdateAnnotationsActionEnum[keyof typeof JobsPartialUpdateAnnotationsActionEnum];
/**
 * @export
 */
export const JobsRetrieveAnnotationsActionEnum = {
    Download: 'download'
} as const;
export type JobsRetrieveAnnotationsActionEnum = typeof JobsRetrieveAnnotationsActionEnum[keyof typeof JobsRetrieveAnnotationsActionEnum];
/**
 * @export
 */
export const JobsRetrieveAnnotationsLocationEnum = {
    CloudStorage: 'cloud_storage',
    Local: 'local'
} as const;
export type JobsRetrieveAnnotationsLocationEnum = typeof JobsRetrieveAnnotationsLocationEnum[keyof typeof JobsRetrieveAnnotationsLocationEnum];
/**
 * @export
 */
export const JobsRetrieveDataQualityEnum = {
    Compressed: 'compressed',
    Original: 'original'
} as const;
export type JobsRetrieveDataQualityEnum = typeof JobsRetrieveDataQualityEnum[keyof typeof JobsRetrieveDataQualityEnum];
/**
 * @export
 */
export const JobsRetrieveDataTypeEnum = {
    Chunk: 'chunk',
    ContextImage: 'context_image',
    Frame: 'frame'
} as const;
export type JobsRetrieveDataTypeEnum = typeof JobsRetrieveDataTypeEnum[keyof typeof JobsRetrieveDataTypeEnum];
/**
 * @export
 */
export const JobsRetrieveDatasetActionEnum = {
    Download: 'download'
} as const;
export type JobsRetrieveDatasetActionEnum = typeof JobsRetrieveDatasetActionEnum[keyof typeof JobsRetrieveDatasetActionEnum];
/**
 * @export
 */
export const JobsRetrieveDatasetLocationEnum = {
    CloudStorage: 'cloud_storage',
    Local: 'local'
} as const;
export type JobsRetrieveDatasetLocationEnum = typeof JobsRetrieveDatasetLocationEnum[keyof typeof JobsRetrieveDatasetLocationEnum];
/**
 * @export
 */
export const JobsUpdateAnnotationsLocationEnum = {
    CloudStorage: 'cloud_storage',
    Local: 'local'
} as const;
export type JobsUpdateAnnotationsLocationEnum = typeof JobsUpdateAnnotationsLocationEnum[keyof typeof JobsUpdateAnnotationsLocationEnum];
