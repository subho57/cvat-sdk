/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.31.0
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ConsensusMergeCreateRequest } from '../models';
// @ts-ignore
import type { ConsensusSettings } from '../models';
// @ts-ignore
import type { PaginatedConsensusSettingsList } from '../models';
// @ts-ignore
import type { PatchedConsensusSettingsRequest } from '../models';
// @ts-ignore
import type { RqId } from '../models';
/**
 * ConsensusApi - axios parameter creator
 * @export
 */
export const ConsensusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a consensus merge
         * @param {string} [rqId] The consensus merge request id. Can be specified to check operation status. 
         * @param {ConsensusMergeCreateRequest} [consensusMergeCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consensusCreateMerge: async (rqId?: string, consensusMergeCreateRequest?: ConsensusMergeCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/consensus/merges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (rqId !== undefined) {
                localVarQueryParameter['rq_id'] = rqId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(consensusMergeCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List consensus settings instances
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;task_id\&#39;].
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;]
         * @param {number} [taskId] A simple equality filter for the task_id field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consensusListSettings: async (xOrganization?: string, filter?: string, org?: string, orgId?: number, page?: number, pageSize?: number, sort?: string, taskId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/consensus/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }


    
            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a consensus settings instance
         * @param {number} id An id of a consensus settings instance
         * @param {PatchedConsensusSettingsRequest} [patchedConsensusSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consensusPartialUpdateSettings: async (id: number, patchedConsensusSettingsRequest?: PatchedConsensusSettingsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('consensusPartialUpdateSettings', 'id', id)
            const localVarPath = `/api/consensus/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedConsensusSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get consensus settings instance details
         * @param {number} id An id of a consensus settings instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consensusRetrieveSettings: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('consensusRetrieveSettings', 'id', id)
            const localVarPath = `/api/consensus/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsensusApi - functional programming interface
 * @export
 */
export const ConsensusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsensusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a consensus merge
         * @param {string} [rqId] The consensus merge request id. Can be specified to check operation status. 
         * @param {ConsensusMergeCreateRequest} [consensusMergeCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consensusCreateMerge(rqId?: string, consensusMergeCreateRequest?: ConsensusMergeCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consensusCreateMerge(rqId, consensusMergeCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsensusApi.consensusCreateMerge']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List consensus settings instances
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;task_id\&#39;].
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;]
         * @param {number} [taskId] A simple equality filter for the task_id field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consensusListSettings(xOrganization?: string, filter?: string, org?: string, orgId?: number, page?: number, pageSize?: number, sort?: string, taskId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedConsensusSettingsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consensusListSettings(xOrganization, filter, org, orgId, page, pageSize, sort, taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsensusApi.consensusListSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a consensus settings instance
         * @param {number} id An id of a consensus settings instance
         * @param {PatchedConsensusSettingsRequest} [patchedConsensusSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consensusPartialUpdateSettings(id: number, patchedConsensusSettingsRequest?: PatchedConsensusSettingsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsensusSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consensusPartialUpdateSettings(id, patchedConsensusSettingsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsensusApi.consensusPartialUpdateSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get consensus settings instance details
         * @param {number} id An id of a consensus settings instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consensusRetrieveSettings(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsensusSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consensusRetrieveSettings(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsensusApi.consensusRetrieveSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConsensusApi - factory interface
 * @export
 */
export const ConsensusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsensusApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a consensus merge
         * @param {ConsensusApiConsensusCreateMergeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consensusCreateMerge(requestParameters: ConsensusApiConsensusCreateMergeRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.consensusCreateMerge(requestParameters.rqId, requestParameters.consensusMergeCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List consensus settings instances
         * @param {ConsensusApiConsensusListSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consensusListSettings(requestParameters: ConsensusApiConsensusListSettingsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedConsensusSettingsList> {
            return localVarFp.consensusListSettings(requestParameters.xOrganization, requestParameters.filter, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.sort, requestParameters.taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a consensus settings instance
         * @param {ConsensusApiConsensusPartialUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consensusPartialUpdateSettings(requestParameters: ConsensusApiConsensusPartialUpdateSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConsensusSettings> {
            return localVarFp.consensusPartialUpdateSettings(requestParameters.id, requestParameters.patchedConsensusSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get consensus settings instance details
         * @param {ConsensusApiConsensusRetrieveSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consensusRetrieveSettings(requestParameters: ConsensusApiConsensusRetrieveSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConsensusSettings> {
            return localVarFp.consensusRetrieveSettings(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for consensusCreateMerge operation in ConsensusApi.
 * @export
 * @interface ConsensusApiConsensusCreateMergeRequest
 */
export interface ConsensusApiConsensusCreateMergeRequest {
    /**
     * The consensus merge request id. Can be specified to check operation status. 
     * @type {string}
     * @memberof ConsensusApiConsensusCreateMerge
     */
    readonly rqId?: string

    /**
     * 
     * @type {ConsensusMergeCreateRequest}
     * @memberof ConsensusApiConsensusCreateMerge
     */
    readonly consensusMergeCreateRequest?: ConsensusMergeCreateRequest
}

/**
 * Request parameters for consensusListSettings operation in ConsensusApi.
 * @export
 * @interface ConsensusApiConsensusListSettingsRequest
 */
export interface ConsensusApiConsensusListSettingsRequest {
    /**
     * Organization unique slug
     * @type {string}
     * @memberof ConsensusApiConsensusListSettings
     */
    readonly xOrganization?: string

    /**
     *  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;task_id\&#39;].
     * @type {string}
     * @memberof ConsensusApiConsensusListSettings
     */
    readonly filter?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof ConsensusApiConsensusListSettings
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof ConsensusApiConsensusListSettings
     */
    readonly orgId?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof ConsensusApiConsensusListSettings
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ConsensusApiConsensusListSettings
     */
    readonly pageSize?: number

    /**
     * Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;]
     * @type {string}
     * @memberof ConsensusApiConsensusListSettings
     */
    readonly sort?: string

    /**
     * A simple equality filter for the task_id field
     * @type {number}
     * @memberof ConsensusApiConsensusListSettings
     */
    readonly taskId?: number
}

/**
 * Request parameters for consensusPartialUpdateSettings operation in ConsensusApi.
 * @export
 * @interface ConsensusApiConsensusPartialUpdateSettingsRequest
 */
export interface ConsensusApiConsensusPartialUpdateSettingsRequest {
    /**
     * An id of a consensus settings instance
     * @type {number}
     * @memberof ConsensusApiConsensusPartialUpdateSettings
     */
    readonly id: number

    /**
     * 
     * @type {PatchedConsensusSettingsRequest}
     * @memberof ConsensusApiConsensusPartialUpdateSettings
     */
    readonly patchedConsensusSettingsRequest?: PatchedConsensusSettingsRequest
}

/**
 * Request parameters for consensusRetrieveSettings operation in ConsensusApi.
 * @export
 * @interface ConsensusApiConsensusRetrieveSettingsRequest
 */
export interface ConsensusApiConsensusRetrieveSettingsRequest {
    /**
     * An id of a consensus settings instance
     * @type {number}
     * @memberof ConsensusApiConsensusRetrieveSettings
     */
    readonly id: number
}

/**
 * ConsensusApi - object-oriented interface
 * @export
 * @class ConsensusApi
 * @extends {BaseAPI}
 */
export class ConsensusApi extends BaseAPI {
    /**
     * 
     * @summary Create a consensus merge
     * @param {ConsensusApiConsensusCreateMergeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsensusApi
     */
    public consensusCreateMerge(requestParameters: ConsensusApiConsensusCreateMergeRequest = {}, options?: RawAxiosRequestConfig) {
        return ConsensusApiFp(this.configuration).consensusCreateMerge(requestParameters.rqId, requestParameters.consensusMergeCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List consensus settings instances
     * @param {ConsensusApiConsensusListSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsensusApi
     */
    public consensusListSettings(requestParameters: ConsensusApiConsensusListSettingsRequest = {}, options?: RawAxiosRequestConfig) {
        return ConsensusApiFp(this.configuration).consensusListSettings(requestParameters.xOrganization, requestParameters.filter, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.sort, requestParameters.taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a consensus settings instance
     * @param {ConsensusApiConsensusPartialUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsensusApi
     */
    public consensusPartialUpdateSettings(requestParameters: ConsensusApiConsensusPartialUpdateSettingsRequest, options?: RawAxiosRequestConfig) {
        return ConsensusApiFp(this.configuration).consensusPartialUpdateSettings(requestParameters.id, requestParameters.patchedConsensusSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get consensus settings instance details
     * @param {ConsensusApiConsensusRetrieveSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsensusApi
     */
    public consensusRetrieveSettings(requestParameters: ConsensusApiConsensusRetrieveSettingsRequest, options?: RawAxiosRequestConfig) {
        return ConsensusApiFp(this.configuration).consensusRetrieveSettings(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

