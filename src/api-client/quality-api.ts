/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PaginatedAnnotationConflictList } from '../models';
// @ts-ignore
import { PaginatedQualityReportList } from '../models';
// @ts-ignore
import { PaginatedQualitySettingsList } from '../models';
// @ts-ignore
import { PatchedQualitySettingsRequest } from '../models';
// @ts-ignore
import { QualityReport } from '../models';
// @ts-ignore
import { QualityReportCreateRequest } from '../models';
// @ts-ignore
import { QualitySettings } from '../models';
// @ts-ignore
import { RqId } from '../models';
/**
 * QualityApi - axios parameter creator
 * @export
 */
export const QualityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a quality report asynchronously and allows to check request status
         * @param {string} [rqId] The report creation request id. Can be specified to check the report creation status. 
         * @param {QualityReportCreateRequest} [qualityReportCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCreateReport: async (rqId?: string, qualityReportCreateRequest?: QualityReportCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/quality/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (rqId !== undefined) {
                localVarQueryParameter['rq_id'] = rqId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(qualityReportCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns a paginated list of annotation conflicts
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;frame\&#39;, \&#39;type\&#39;, \&#39;job_id\&#39;, \&#39;task_id\&#39;, \&#39;severity\&#39;].
         * @param {number} [frame] A simple equality filter for the frame field
         * @param {number} [jobId] A simple equality filter for the job_id field
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [reportId] A simple equality filter for report id
         * @param {QualityListConflictsSeverityEnum} [severity] A simple equality filter for the severity field
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;, \&#39;frame\&#39;, \&#39;type\&#39;, \&#39;job_id\&#39;, \&#39;task_id\&#39;, \&#39;severity\&#39;]
         * @param {number} [taskId] A simple equality filter for the task_id field
         * @param {QualityListConflictsTypeEnum} [type] A simple equality filter for the type field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityListConflicts: async (xOrganization?: string, filter?: string, frame?: number, jobId?: number, org?: string, orgId?: number, page?: number, pageSize?: number, reportId?: number, severity?: QualityListConflictsSeverityEnum, sort?: string, taskId?: number, type?: QualityListConflictsTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/quality/conflicts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (frame !== undefined) {
                localVarQueryParameter['frame'] = frame;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (reportId !== undefined) {
                localVarQueryParameter['report_id'] = reportId;
            }

            if (severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns a paginated list of quality reports
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;job_id\&#39;, \&#39;created_date\&#39;, \&#39;gt_last_updated\&#39;, \&#39;target_last_updated\&#39;, \&#39;parent_id\&#39;].
         * @param {number} [jobId] A simple equality filter for the job_id field
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [parentId] A simple equality filter for the parent_id field
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;, \&#39;job_id\&#39;, \&#39;created_date\&#39;, \&#39;gt_last_updated\&#39;, \&#39;target_last_updated\&#39;, \&#39;parent_id\&#39;]
         * @param {string} [target] A simple equality filter for target
         * @param {number} [taskId] A simple equality filter for task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityListReports: async (xOrganization?: string, filter?: string, jobId?: number, org?: string, orgId?: number, page?: number, pageSize?: number, parentId?: number, sort?: string, target?: string, taskId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/quality/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parent_id'] = parentId;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns a paginated list of quality settings instances
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;task_id\&#39;].
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;]
         * @param {number} [taskId] A simple equality filter for the task_id field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityListSettings: async (xOrganization?: string, filter?: string, org?: string, orgId?: number, page?: number, pageSize?: number, sort?: string, taskId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/quality/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in the quality settings instance
         * @param {number} id An id of a quality settings instance
         * @param {PatchedQualitySettingsRequest} [patchedQualitySettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityPartialUpdateSettings: async (id: number, patchedQualitySettingsRequest?: PatchedQualitySettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('qualityPartialUpdateSettings', 'id', id)
            const localVarPath = `/api/quality/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedQualitySettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns details of a quality report
         * @param {number} id A unique integer value identifying this quality report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityRetrieveReport: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('qualityRetrieveReport', 'id', id)
            const localVarPath = `/api/quality/reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve full contents of the report in JSON format
         * @param {number} id A unique integer value identifying this quality report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityRetrieveReportData: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('qualityRetrieveReportData', 'id', id)
            const localVarPath = `/api/quality/reports/{id}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns details of the quality settings instance
         * @param {number} id An id of a quality settings instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityRetrieveSettings: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('qualityRetrieveSettings', 'id', id)
            const localVarPath = `/api/quality/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QualityApi - functional programming interface
 * @export
 */
export const QualityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QualityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a quality report asynchronously and allows to check request status
         * @param {string} [rqId] The report creation request id. Can be specified to check the report creation status. 
         * @param {QualityReportCreateRequest} [qualityReportCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityCreateReport(rqId?: string, qualityReportCreateRequest?: QualityReportCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualityReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityCreateReport(rqId, qualityReportCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns a paginated list of annotation conflicts
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;frame\&#39;, \&#39;type\&#39;, \&#39;job_id\&#39;, \&#39;task_id\&#39;, \&#39;severity\&#39;].
         * @param {number} [frame] A simple equality filter for the frame field
         * @param {number} [jobId] A simple equality filter for the job_id field
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [reportId] A simple equality filter for report id
         * @param {QualityListConflictsSeverityEnum} [severity] A simple equality filter for the severity field
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;, \&#39;frame\&#39;, \&#39;type\&#39;, \&#39;job_id\&#39;, \&#39;task_id\&#39;, \&#39;severity\&#39;]
         * @param {number} [taskId] A simple equality filter for the task_id field
         * @param {QualityListConflictsTypeEnum} [type] A simple equality filter for the type field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityListConflicts(xOrganization?: string, filter?: string, frame?: number, jobId?: number, org?: string, orgId?: number, page?: number, pageSize?: number, reportId?: number, severity?: QualityListConflictsSeverityEnum, sort?: string, taskId?: number, type?: QualityListConflictsTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAnnotationConflictList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityListConflicts(xOrganization, filter, frame, jobId, org, orgId, page, pageSize, reportId, severity, sort, taskId, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns a paginated list of quality reports
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;job_id\&#39;, \&#39;created_date\&#39;, \&#39;gt_last_updated\&#39;, \&#39;target_last_updated\&#39;, \&#39;parent_id\&#39;].
         * @param {number} [jobId] A simple equality filter for the job_id field
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [parentId] A simple equality filter for the parent_id field
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;, \&#39;job_id\&#39;, \&#39;created_date\&#39;, \&#39;gt_last_updated\&#39;, \&#39;target_last_updated\&#39;, \&#39;parent_id\&#39;]
         * @param {string} [target] A simple equality filter for target
         * @param {number} [taskId] A simple equality filter for task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityListReports(xOrganization?: string, filter?: string, jobId?: number, org?: string, orgId?: number, page?: number, pageSize?: number, parentId?: number, sort?: string, target?: string, taskId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedQualityReportList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityListReports(xOrganization, filter, jobId, org, orgId, page, pageSize, parentId, sort, target, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns a paginated list of quality settings instances
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;task_id\&#39;].
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;]
         * @param {number} [taskId] A simple equality filter for the task_id field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityListSettings(xOrganization?: string, filter?: string, org?: string, orgId?: number, page?: number, pageSize?: number, sort?: string, taskId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedQualitySettingsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityListSettings(xOrganization, filter, org, orgId, page, pageSize, sort, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in the quality settings instance
         * @param {number} id An id of a quality settings instance
         * @param {PatchedQualitySettingsRequest} [patchedQualitySettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityPartialUpdateSettings(id: number, patchedQualitySettingsRequest?: PatchedQualitySettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualitySettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityPartialUpdateSettings(id, patchedQualitySettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns details of a quality report
         * @param {number} id A unique integer value identifying this quality report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityRetrieveReport(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualityReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityRetrieveReport(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve full contents of the report in JSON format
         * @param {number} id A unique integer value identifying this quality report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityRetrieveReportData(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityRetrieveReportData(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns details of the quality settings instance
         * @param {number} id An id of a quality settings instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityRetrieveSettings(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualitySettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityRetrieveSettings(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QualityApi - factory interface
 * @export
 */
export const QualityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QualityApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a quality report asynchronously and allows to check request status
         * @param {QualityApiQualityCreateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCreateReport(requestParameters: QualityApiQualityCreateReportRequest = {}, options?: AxiosRequestConfig): AxiosPromise<QualityReport> {
            return localVarFp.qualityCreateReport(requestParameters.rqId, requestParameters.qualityReportCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns a paginated list of annotation conflicts
         * @param {QualityApiQualityListConflictsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityListConflicts(requestParameters: QualityApiQualityListConflictsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedAnnotationConflictList> {
            return localVarFp.qualityListConflicts(requestParameters.xOrganization, requestParameters.filter, requestParameters.frame, requestParameters.jobId, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.reportId, requestParameters.severity, requestParameters.sort, requestParameters.taskId, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns a paginated list of quality reports
         * @param {QualityApiQualityListReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityListReports(requestParameters: QualityApiQualityListReportsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedQualityReportList> {
            return localVarFp.qualityListReports(requestParameters.xOrganization, requestParameters.filter, requestParameters.jobId, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.parentId, requestParameters.sort, requestParameters.target, requestParameters.taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns a paginated list of quality settings instances
         * @param {QualityApiQualityListSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityListSettings(requestParameters: QualityApiQualityListSettingsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedQualitySettingsList> {
            return localVarFp.qualityListSettings(requestParameters.xOrganization, requestParameters.filter, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.sort, requestParameters.taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in the quality settings instance
         * @param {QualityApiQualityPartialUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityPartialUpdateSettings(requestParameters: QualityApiQualityPartialUpdateSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<QualitySettings> {
            return localVarFp.qualityPartialUpdateSettings(requestParameters.id, requestParameters.patchedQualitySettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns details of a quality report
         * @param {QualityApiQualityRetrieveReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityRetrieveReport(requestParameters: QualityApiQualityRetrieveReportRequest, options?: AxiosRequestConfig): AxiosPromise<QualityReport> {
            return localVarFp.qualityRetrieveReport(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve full contents of the report in JSON format
         * @param {QualityApiQualityRetrieveReportDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityRetrieveReportData(requestParameters: QualityApiQualityRetrieveReportDataRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.qualityRetrieveReportData(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns details of the quality settings instance
         * @param {QualityApiQualityRetrieveSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityRetrieveSettings(requestParameters: QualityApiQualityRetrieveSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<QualitySettings> {
            return localVarFp.qualityRetrieveSettings(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for qualityCreateReport operation in QualityApi.
 * @export
 * @interface QualityApiQualityCreateReportRequest
 */
export interface QualityApiQualityCreateReportRequest {
    /**
     * The report creation request id. Can be specified to check the report creation status. 
     * @type {string}
     * @memberof QualityApiQualityCreateReport
     */
    readonly rqId?: string

    /**
     * 
     * @type {QualityReportCreateRequest}
     * @memberof QualityApiQualityCreateReport
     */
    readonly qualityReportCreateRequest?: QualityReportCreateRequest
}

/**
 * Request parameters for qualityListConflicts operation in QualityApi.
 * @export
 * @interface QualityApiQualityListConflictsRequest
 */
export interface QualityApiQualityListConflictsRequest {
    /**
     * Organization unique slug
     * @type {string}
     * @memberof QualityApiQualityListConflicts
     */
    readonly xOrganization?: string

    /**
     *  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;frame\&#39;, \&#39;type\&#39;, \&#39;job_id\&#39;, \&#39;task_id\&#39;, \&#39;severity\&#39;].
     * @type {string}
     * @memberof QualityApiQualityListConflicts
     */
    readonly filter?: string

    /**
     * A simple equality filter for the frame field
     * @type {number}
     * @memberof QualityApiQualityListConflicts
     */
    readonly frame?: number

    /**
     * A simple equality filter for the job_id field
     * @type {number}
     * @memberof QualityApiQualityListConflicts
     */
    readonly jobId?: number

    /**
     * Organization unique slug
     * @type {string}
     * @memberof QualityApiQualityListConflicts
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof QualityApiQualityListConflicts
     */
    readonly orgId?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof QualityApiQualityListConflicts
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof QualityApiQualityListConflicts
     */
    readonly pageSize?: number

    /**
     * A simple equality filter for report id
     * @type {number}
     * @memberof QualityApiQualityListConflicts
     */
    readonly reportId?: number

    /**
     * A simple equality filter for the severity field
     * @type {'warning' | 'error'}
     * @memberof QualityApiQualityListConflicts
     */
    readonly severity?: QualityListConflictsSeverityEnum

    /**
     * Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;, \&#39;frame\&#39;, \&#39;type\&#39;, \&#39;job_id\&#39;, \&#39;task_id\&#39;, \&#39;severity\&#39;]
     * @type {string}
     * @memberof QualityApiQualityListConflicts
     */
    readonly sort?: string

    /**
     * A simple equality filter for the task_id field
     * @type {number}
     * @memberof QualityApiQualityListConflicts
     */
    readonly taskId?: number

    /**
     * A simple equality filter for the type field
     * @type {'missing_annotation' | 'extra_annotation' | 'mismatching_label' | 'low_overlap' | 'mismatching_direction' | 'mismatching_attributes' | 'mismatching_groups' | 'covered_annotation'}
     * @memberof QualityApiQualityListConflicts
     */
    readonly type?: QualityListConflictsTypeEnum
}

/**
 * Request parameters for qualityListReports operation in QualityApi.
 * @export
 * @interface QualityApiQualityListReportsRequest
 */
export interface QualityApiQualityListReportsRequest {
    /**
     * Organization unique slug
     * @type {string}
     * @memberof QualityApiQualityListReports
     */
    readonly xOrganization?: string

    /**
     *  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;job_id\&#39;, \&#39;created_date\&#39;, \&#39;gt_last_updated\&#39;, \&#39;target_last_updated\&#39;, \&#39;parent_id\&#39;].
     * @type {string}
     * @memberof QualityApiQualityListReports
     */
    readonly filter?: string

    /**
     * A simple equality filter for the job_id field
     * @type {number}
     * @memberof QualityApiQualityListReports
     */
    readonly jobId?: number

    /**
     * Organization unique slug
     * @type {string}
     * @memberof QualityApiQualityListReports
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof QualityApiQualityListReports
     */
    readonly orgId?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof QualityApiQualityListReports
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof QualityApiQualityListReports
     */
    readonly pageSize?: number

    /**
     * A simple equality filter for the parent_id field
     * @type {number}
     * @memberof QualityApiQualityListReports
     */
    readonly parentId?: number

    /**
     * Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;, \&#39;job_id\&#39;, \&#39;created_date\&#39;, \&#39;gt_last_updated\&#39;, \&#39;target_last_updated\&#39;, \&#39;parent_id\&#39;]
     * @type {string}
     * @memberof QualityApiQualityListReports
     */
    readonly sort?: string

    /**
     * A simple equality filter for target
     * @type {string}
     * @memberof QualityApiQualityListReports
     */
    readonly target?: string

    /**
     * A simple equality filter for task id
     * @type {number}
     * @memberof QualityApiQualityListReports
     */
    readonly taskId?: number
}

/**
 * Request parameters for qualityListSettings operation in QualityApi.
 * @export
 * @interface QualityApiQualityListSettingsRequest
 */
export interface QualityApiQualityListSettingsRequest {
    /**
     * Organization unique slug
     * @type {string}
     * @memberof QualityApiQualityListSettings
     */
    readonly xOrganization?: string

    /**
     *  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;id\&#39;, \&#39;task_id\&#39;].
     * @type {string}
     * @memberof QualityApiQualityListSettings
     */
    readonly filter?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof QualityApiQualityListSettings
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof QualityApiQualityListSettings
     */
    readonly orgId?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof QualityApiQualityListSettings
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof QualityApiQualityListSettings
     */
    readonly pageSize?: number

    /**
     * Which field to use when ordering the results. Available ordering_fields: [\&#39;id\&#39;]
     * @type {string}
     * @memberof QualityApiQualityListSettings
     */
    readonly sort?: string

    /**
     * A simple equality filter for the task_id field
     * @type {number}
     * @memberof QualityApiQualityListSettings
     */
    readonly taskId?: number
}

/**
 * Request parameters for qualityPartialUpdateSettings operation in QualityApi.
 * @export
 * @interface QualityApiQualityPartialUpdateSettingsRequest
 */
export interface QualityApiQualityPartialUpdateSettingsRequest {
    /**
     * An id of a quality settings instance
     * @type {number}
     * @memberof QualityApiQualityPartialUpdateSettings
     */
    readonly id: number

    /**
     * 
     * @type {PatchedQualitySettingsRequest}
     * @memberof QualityApiQualityPartialUpdateSettings
     */
    readonly patchedQualitySettingsRequest?: PatchedQualitySettingsRequest
}

/**
 * Request parameters for qualityRetrieveReport operation in QualityApi.
 * @export
 * @interface QualityApiQualityRetrieveReportRequest
 */
export interface QualityApiQualityRetrieveReportRequest {
    /**
     * A unique integer value identifying this quality report.
     * @type {number}
     * @memberof QualityApiQualityRetrieveReport
     */
    readonly id: number
}

/**
 * Request parameters for qualityRetrieveReportData operation in QualityApi.
 * @export
 * @interface QualityApiQualityRetrieveReportDataRequest
 */
export interface QualityApiQualityRetrieveReportDataRequest {
    /**
     * A unique integer value identifying this quality report.
     * @type {number}
     * @memberof QualityApiQualityRetrieveReportData
     */
    readonly id: number
}

/**
 * Request parameters for qualityRetrieveSettings operation in QualityApi.
 * @export
 * @interface QualityApiQualityRetrieveSettingsRequest
 */
export interface QualityApiQualityRetrieveSettingsRequest {
    /**
     * An id of a quality settings instance
     * @type {number}
     * @memberof QualityApiQualityRetrieveSettings
     */
    readonly id: number
}

/**
 * QualityApi - object-oriented interface
 * @export
 * @class QualityApi
 * @extends {BaseAPI}
 */
export class QualityApi extends BaseAPI {
    /**
     * 
     * @summary Creates a quality report asynchronously and allows to check request status
     * @param {QualityApiQualityCreateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityApi
     */
    public qualityCreateReport(requestParameters: QualityApiQualityCreateReportRequest = {}, options?: AxiosRequestConfig) {
        return QualityApiFp(this.configuration).qualityCreateReport(requestParameters.rqId, requestParameters.qualityReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns a paginated list of annotation conflicts
     * @param {QualityApiQualityListConflictsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityApi
     */
    public qualityListConflicts(requestParameters: QualityApiQualityListConflictsRequest = {}, options?: AxiosRequestConfig) {
        return QualityApiFp(this.configuration).qualityListConflicts(requestParameters.xOrganization, requestParameters.filter, requestParameters.frame, requestParameters.jobId, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.reportId, requestParameters.severity, requestParameters.sort, requestParameters.taskId, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns a paginated list of quality reports
     * @param {QualityApiQualityListReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityApi
     */
    public qualityListReports(requestParameters: QualityApiQualityListReportsRequest = {}, options?: AxiosRequestConfig) {
        return QualityApiFp(this.configuration).qualityListReports(requestParameters.xOrganization, requestParameters.filter, requestParameters.jobId, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.parentId, requestParameters.sort, requestParameters.target, requestParameters.taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns a paginated list of quality settings instances
     * @param {QualityApiQualityListSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityApi
     */
    public qualityListSettings(requestParameters: QualityApiQualityListSettingsRequest = {}, options?: AxiosRequestConfig) {
        return QualityApiFp(this.configuration).qualityListSettings(requestParameters.xOrganization, requestParameters.filter, requestParameters.org, requestParameters.orgId, requestParameters.page, requestParameters.pageSize, requestParameters.sort, requestParameters.taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Methods does a partial update of chosen fields in the quality settings instance
     * @param {QualityApiQualityPartialUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityApi
     */
    public qualityPartialUpdateSettings(requestParameters: QualityApiQualityPartialUpdateSettingsRequest, options?: AxiosRequestConfig) {
        return QualityApiFp(this.configuration).qualityPartialUpdateSettings(requestParameters.id, requestParameters.patchedQualitySettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns details of a quality report
     * @param {QualityApiQualityRetrieveReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityApi
     */
    public qualityRetrieveReport(requestParameters: QualityApiQualityRetrieveReportRequest, options?: AxiosRequestConfig) {
        return QualityApiFp(this.configuration).qualityRetrieveReport(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve full contents of the report in JSON format
     * @param {QualityApiQualityRetrieveReportDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityApi
     */
    public qualityRetrieveReportData(requestParameters: QualityApiQualityRetrieveReportDataRequest, options?: AxiosRequestConfig) {
        return QualityApiFp(this.configuration).qualityRetrieveReportData(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns details of the quality settings instance
     * @param {QualityApiQualityRetrieveSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityApi
     */
    public qualityRetrieveSettings(requestParameters: QualityApiQualityRetrieveSettingsRequest, options?: AxiosRequestConfig) {
        return QualityApiFp(this.configuration).qualityRetrieveSettings(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const QualityListConflictsSeverityEnum = {
    Warning: 'warning',
    Error: 'error'
} as const;
export type QualityListConflictsSeverityEnum = typeof QualityListConflictsSeverityEnum[keyof typeof QualityListConflictsSeverityEnum];
/**
 * @export
 */
export const QualityListConflictsTypeEnum = {
    MissingAnnotation: 'missing_annotation',
    ExtraAnnotation: 'extra_annotation',
    MismatchingLabel: 'mismatching_label',
    LowOverlap: 'low_overlap',
    MismatchingDirection: 'mismatching_direction',
    MismatchingAttributes: 'mismatching_attributes',
    MismatchingGroups: 'mismatching_groups',
    CoveredAnnotation: 'covered_annotation'
} as const;
export type QualityListConflictsTypeEnum = typeof QualityListConflictsTypeEnum[keyof typeof QualityListConflictsTypeEnum];
