/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.31.0
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AnnotationsRead } from '../models';
// @ts-ignore
import type { BackupWriteRequest } from '../models';
// @ts-ignore
import type { DatasetWriteRequest } from '../models';
// @ts-ignore
import type { PaginatedProjectReadList } from '../models';
// @ts-ignore
import type { PatchedProjectWriteRequest } from '../models';
// @ts-ignore
import type { ProjectRead } from '../models';
// @ts-ignore
import type { ProjectWriteRequest } from '../models';
// @ts-ignore
import type { RqId } from '../models';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectWriteRequest} projectWriteRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreate: async (projectWriteRequest: ProjectWriteRequest, xOrganization?: string, org?: string, orgId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectWriteRequest' is not null or undefined
            assertParamExists('projectsCreate', 'projectWriteRequest', projectWriteRequest)
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  The backup import process is as follows:  The first request POST /api/projects/backup will initiate file upload and will create the rq job on the server in which the process of a project creating from an uploaded backup will be carried out.  After initiating the backup upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent requests to track the status of the project creation. Once the project has been successfully created, the server will return the id of the newly created project. 
         * @summary Recreate a project from a backup
         * @param {string} [xOrganization] Organization unique slug
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Backup file name
         * @param {ProjectsCreateBackupLocationEnum} [location] Where to import the backup file from
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {string} [rqId] rq id
         * @param {BackupWriteRequest | null} [backupWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreateBackup: async (xOrganization?: string, cloudStorageId?: number, filename?: string, location?: ProjectsCreateBackupLocationEnum, org?: string, orgId?: number, rqId?: string, backupWriteRequest?: BackupWriteRequest | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projects/backup/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (cloudStorageId !== undefined) {
                localVarQueryParameter['cloud_storage_id'] = cloudStorageId;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (rqId !== undefined) {
                localVarQueryParameter['rq_id'] = rqId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(backupWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The request `POST /api/<projects|tasks>/id/backup/export` will initialize a background process to backup a resource. To check status of the process please, use `GET /api/requests/<rq_id>` where **rq_id** is request ID returned in the response for this endpoint. 
         * @summary Initiate process to backup resource
         * @param {number} id A unique integer value identifying this project.
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Backup file name
         * @param {ProjectsCreateBackupExportLocationEnum} [location] Where need to save downloaded backup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreateBackupExport: async (id: number, cloudStorageId?: number, filename?: string, location?: ProjectsCreateBackupExportLocationEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsCreateBackupExport', 'id', id)
            const localVarPath = `/api/projects/{id}/backup/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (cloudStorageId !== undefined) {
                localVarQueryParameter['cloud_storage_id'] = cloudStorageId;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  The request POST /api/projects/id/dataset initiates a background process to import dataset into a project. Please, use the GET /api/requests/<rq_id> endpoint for checking status of the process. The `rq_id` parameter can be found in the response on initiating request. 
         * @summary Import a dataset into a project
         * @param {number} id A unique integer value identifying this project.
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Dataset file name
         * @param {string} [format] Desired dataset format name You can get the list of supported formats at: /server/annotation/formats
         * @param {ProjectsCreateDatasetLocationEnum} [location] Where to import the dataset from
         * @param {boolean} [useDefaultLocation] Use the location that was configured in the project to import annotations
         * @param {DatasetWriteRequest | null} [datasetWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreateDataset: async (id: number, cloudStorageId?: number, filename?: string, format?: string, location?: ProjectsCreateDatasetLocationEnum, useDefaultLocation?: boolean, datasetWriteRequest?: DatasetWriteRequest | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsCreateDataset', 'id', id)
            const localVarPath = `/api/projects/{id}/dataset/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (cloudStorageId !== undefined) {
                localVarQueryParameter['cloud_storage_id'] = cloudStorageId;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (useDefaultLocation !== undefined) {
                localVarQueryParameter['use_default_location'] = useDefaultLocation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(datasetWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The request `POST /api/<projects|tasks|jobs>/id/dataset/export` will initialize a background process to export a dataset. To check status of the process please, use `GET /api/requests/<rq_id>` where **rq_id** is request ID returned in the response for this endpoint. 
         * @summary Initialize process to export resource as a dataset in a specific format
         * @param {string} format Desired output format name You can get the list of supported formats at: /server/annotation/formats
         * @param {number} id A unique integer value identifying this project.
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Desired output file name
         * @param {ProjectsCreateDatasetExportLocationEnum} [location] Where need to save downloaded dataset
         * @param {boolean} [saveImages] Include images or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreateDatasetExport: async (format: string, id: number, cloudStorageId?: number, filename?: string, location?: ProjectsCreateDatasetExportLocationEnum, saveImages?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('projectsCreateDatasetExport', 'format', format)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsCreateDatasetExport', 'id', id)
            const localVarPath = `/api/projects/{id}/dataset/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (cloudStorageId !== undefined) {
                localVarQueryParameter['cloud_storage_id'] = cloudStorageId;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (saveImages !== undefined) {
                localVarQueryParameter['save_images'] = saveImages;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a project
         * @param {number} id A unique integer value identifying this project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsDestroy', 'id', id)
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List projects
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [assignee] A simple equality filter for the assignee field
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;name\&#39;, \&#39;owner\&#39;, \&#39;assignee\&#39;, \&#39;status\&#39;, \&#39;id\&#39;, \&#39;updated_date\&#39;].
         * @param {string} [name] A simple equality filter for the name field
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {string} [owner] A simple equality filter for the owner field
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term. Available search_fields: (\&#39;name\&#39;, \&#39;owner\&#39;, \&#39;assignee\&#39;, \&#39;status\&#39;)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;name\&#39;, \&#39;owner\&#39;, \&#39;assignee\&#39;, \&#39;status\&#39;, \&#39;id\&#39;, \&#39;updated_date\&#39;]
         * @param {ProjectsListStatusEnum} [status] A simple equality filter for the status field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsList: async (xOrganization?: string, assignee?: string, filter?: string, name?: string, org?: string, orgId?: number, owner?: string, page?: number, pageSize?: number, search?: string, sort?: string, status?: ProjectsListStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (assignee !== undefined) {
                localVarQueryParameter['assignee'] = assignee;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a project
         * @param {number} id A unique integer value identifying this project.
         * @param {PatchedProjectWriteRequest} [patchedProjectWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsPartialUpdate: async (id: number, patchedProjectWriteRequest?: PatchedProjectWriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsPartialUpdate', 'id', id)
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedProjectWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get project details
         * @param {number} id A unique integer value identifying this project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsRetrieve', 'id', id)
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecation warning:  Using this endpoint to initiate export of annotations as a dataset or to check export status is deprecated. Consider using new API: - POST /api/projects/<project_id>/dataset/export?save_images=False to initiate exporting process - GET /api/requests/<rq_id> to check export status,     where rq_id is request id returned on initializing request\' 
         * @summary Export project annotations as a dataset
         * @param {string} format Desired output format name You can get the list of supported formats at: /server/annotation/formats
         * @param {number} id A unique integer value identifying this project.
         * @param {ProjectsRetrieveAnnotationsActionEnum} [action] Used to start downloading process locally after annotation file has been created
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Desired output file name
         * @param {ProjectsRetrieveAnnotationsLocationEnum} [location] Where need to save downloaded dataset
         * @param {boolean} [useDefaultLocation] Use the location that was configured in project to export annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsRetrieveAnnotations: async (format: string, id: number, action?: ProjectsRetrieveAnnotationsActionEnum, cloudStorageId?: number, filename?: string, location?: ProjectsRetrieveAnnotationsLocationEnum, useDefaultLocation?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('projectsRetrieveAnnotations', 'format', format)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsRetrieveAnnotations', 'id', id)
            const localVarPath = `/api/projects/{id}/annotations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (cloudStorageId !== undefined) {
                localVarQueryParameter['cloud_storage_id'] = cloudStorageId;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (useDefaultLocation !== undefined) {
                localVarQueryParameter['use_default_location'] = useDefaultLocation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecation warning:  This endpoint will be deprecated in one of the next releases. Consider using new API: - POST /api/projects/<project_id>/backup/export to initiate backup process - GET /api/requests/<rq_id> to check process status,     where rq_id is request id returned on initializing request 
         * @summary Back up a project
         * @param {number} id A unique integer value identifying this project.
         * @param {ProjectsRetrieveBackupActionEnum} [action] Used to start downloading process after backup file had been created
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Backup file name
         * @param {ProjectsRetrieveBackupLocationEnum} [location] Where need to save downloaded backup
         * @param {boolean} [useDefaultLocation] Use the location that was configured in project to export backup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsRetrieveBackup: async (id: number, action?: ProjectsRetrieveBackupActionEnum, cloudStorageId?: number, filename?: string, location?: ProjectsRetrieveBackupLocationEnum, useDefaultLocation?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsRetrieveBackup', 'id', id)
            const localVarPath = `/api/projects/{id}/backup`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (cloudStorageId !== undefined) {
                localVarQueryParameter['cloud_storage_id'] = cloudStorageId;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (useDefaultLocation !== undefined) {
                localVarQueryParameter['use_default_location'] = useDefaultLocation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  To check the status of the process of importing a project dataset from a file:  After initiating the dataset upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent GET /api/projects/id/dataset requests to track the status of the dataset import. Also you should specify action parameter: action=import_status.  Deprecation warning: Utilizing this endpoint to export project dataset in a specific format will be deprecated in one of the next releases. Consider using new API: - POST /api/projects/<project_id>/dataset/export/?save_images=True to initiate export process - GET /api/requests/<rq_id> to check process status,     where rq_id is request id returned on initializing request 
         * @summary Export a project as a dataset / Check dataset import status
         * @param {number} id A unique integer value identifying this project.
         * @param {ProjectsRetrieveDatasetActionEnum} [action] Used to start downloading process locally after annotation file has been created
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Desired output file name
         * @param {string} [format] Desired output format name You can get the list of supported formats at: /server/annotation/formats
         * @param {ProjectsRetrieveDatasetLocationEnum} [location] Where need to save downloaded dataset
         * @param {string} [rqId] rq id
         * @param {boolean} [useDefaultLocation] Use the location that was configured in project to import dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsRetrieveDataset: async (id: number, action?: ProjectsRetrieveDatasetActionEnum, cloudStorageId?: number, filename?: string, format?: string, location?: ProjectsRetrieveDatasetLocationEnum, rqId?: string, useDefaultLocation?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsRetrieveDataset', 'id', id)
            const localVarPath = `/api/projects/{id}/dataset/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (cloudStorageId !== undefined) {
                localVarQueryParameter['cloud_storage_id'] = cloudStorageId;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (rqId !== undefined) {
                localVarQueryParameter['rq_id'] = rqId;
            }

            if (useDefaultLocation !== undefined) {
                localVarQueryParameter['use_default_location'] = useDefaultLocation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a preview image for a project
         * @param {number} id A unique integer value identifying this project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsRetrievePreview: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsRetrievePreview', 'id', id)
            const localVarPath = `/api/projects/{id}/preview`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectWriteRequest} projectWriteRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCreate(projectWriteRequest: ProjectWriteRequest, xOrganization?: string, org?: string, orgId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCreate(projectWriteRequest, xOrganization, org, orgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *  The backup import process is as follows:  The first request POST /api/projects/backup will initiate file upload and will create the rq job on the server in which the process of a project creating from an uploaded backup will be carried out.  After initiating the backup upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent requests to track the status of the project creation. Once the project has been successfully created, the server will return the id of the newly created project. 
         * @summary Recreate a project from a backup
         * @param {string} [xOrganization] Organization unique slug
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Backup file name
         * @param {ProjectsCreateBackupLocationEnum} [location] Where to import the backup file from
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {string} [rqId] rq id
         * @param {BackupWriteRequest | null} [backupWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCreateBackup(xOrganization?: string, cloudStorageId?: number, filename?: string, location?: ProjectsCreateBackupLocationEnum, org?: string, orgId?: number, rqId?: string, backupWriteRequest?: BackupWriteRequest | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCreateBackup(xOrganization, cloudStorageId, filename, location, org, orgId, rqId, backupWriteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsCreateBackup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The request `POST /api/<projects|tasks>/id/backup/export` will initialize a background process to backup a resource. To check status of the process please, use `GET /api/requests/<rq_id>` where **rq_id** is request ID returned in the response for this endpoint. 
         * @summary Initiate process to backup resource
         * @param {number} id A unique integer value identifying this project.
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Backup file name
         * @param {ProjectsCreateBackupExportLocationEnum} [location] Where need to save downloaded backup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCreateBackupExport(id: number, cloudStorageId?: number, filename?: string, location?: ProjectsCreateBackupExportLocationEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RqId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCreateBackupExport(id, cloudStorageId, filename, location, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsCreateBackupExport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *  The request POST /api/projects/id/dataset initiates a background process to import dataset into a project. Please, use the GET /api/requests/<rq_id> endpoint for checking status of the process. The `rq_id` parameter can be found in the response on initiating request. 
         * @summary Import a dataset into a project
         * @param {number} id A unique integer value identifying this project.
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Dataset file name
         * @param {string} [format] Desired dataset format name You can get the list of supported formats at: /server/annotation/formats
         * @param {ProjectsCreateDatasetLocationEnum} [location] Where to import the dataset from
         * @param {boolean} [useDefaultLocation] Use the location that was configured in the project to import annotations
         * @param {DatasetWriteRequest | null} [datasetWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCreateDataset(id: number, cloudStorageId?: number, filename?: string, format?: string, location?: ProjectsCreateDatasetLocationEnum, useDefaultLocation?: boolean, datasetWriteRequest?: DatasetWriteRequest | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RqId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCreateDataset(id, cloudStorageId, filename, format, location, useDefaultLocation, datasetWriteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsCreateDataset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The request `POST /api/<projects|tasks|jobs>/id/dataset/export` will initialize a background process to export a dataset. To check status of the process please, use `GET /api/requests/<rq_id>` where **rq_id** is request ID returned in the response for this endpoint. 
         * @summary Initialize process to export resource as a dataset in a specific format
         * @param {string} format Desired output format name You can get the list of supported formats at: /server/annotation/formats
         * @param {number} id A unique integer value identifying this project.
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Desired output file name
         * @param {ProjectsCreateDatasetExportLocationEnum} [location] Where need to save downloaded dataset
         * @param {boolean} [saveImages] Include images or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCreateDatasetExport(format: string, id: number, cloudStorageId?: number, filename?: string, location?: ProjectsCreateDatasetExportLocationEnum, saveImages?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RqId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCreateDatasetExport(format, id, cloudStorageId, filename, location, saveImages, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsCreateDatasetExport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a project
         * @param {number} id A unique integer value identifying this project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List projects
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [assignee] A simple equality filter for the assignee field
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;name\&#39;, \&#39;owner\&#39;, \&#39;assignee\&#39;, \&#39;status\&#39;, \&#39;id\&#39;, \&#39;updated_date\&#39;].
         * @param {string} [name] A simple equality filter for the name field
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {string} [owner] A simple equality filter for the owner field
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term. Available search_fields: (\&#39;name\&#39;, \&#39;owner\&#39;, \&#39;assignee\&#39;, \&#39;status\&#39;)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;name\&#39;, \&#39;owner\&#39;, \&#39;assignee\&#39;, \&#39;status\&#39;, \&#39;id\&#39;, \&#39;updated_date\&#39;]
         * @param {ProjectsListStatusEnum} [status] A simple equality filter for the status field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsList(xOrganization?: string, assignee?: string, filter?: string, name?: string, org?: string, orgId?: number, owner?: string, page?: number, pageSize?: number, search?: string, sort?: string, status?: ProjectsListStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedProjectReadList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsList(xOrganization, assignee, filter, name, org, orgId, owner, page, pageSize, search, sort, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a project
         * @param {number} id A unique integer value identifying this project.
         * @param {PatchedProjectWriteRequest} [patchedProjectWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsPartialUpdate(id: number, patchedProjectWriteRequest?: PatchedProjectWriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsPartialUpdate(id, patchedProjectWriteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get project details
         * @param {number} id A unique integer value identifying this project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deprecation warning:  Using this endpoint to initiate export of annotations as a dataset or to check export status is deprecated. Consider using new API: - POST /api/projects/<project_id>/dataset/export?save_images=False to initiate exporting process - GET /api/requests/<rq_id> to check export status,     where rq_id is request id returned on initializing request\' 
         * @summary Export project annotations as a dataset
         * @param {string} format Desired output format name You can get the list of supported formats at: /server/annotation/formats
         * @param {number} id A unique integer value identifying this project.
         * @param {ProjectsRetrieveAnnotationsActionEnum} [action] Used to start downloading process locally after annotation file has been created
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Desired output file name
         * @param {ProjectsRetrieveAnnotationsLocationEnum} [location] Where need to save downloaded dataset
         * @param {boolean} [useDefaultLocation] Use the location that was configured in project to export annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsRetrieveAnnotations(format: string, id: number, action?: ProjectsRetrieveAnnotationsActionEnum, cloudStorageId?: number, filename?: string, location?: ProjectsRetrieveAnnotationsLocationEnum, useDefaultLocation?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationsRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsRetrieveAnnotations(format, id, action, cloudStorageId, filename, location, useDefaultLocation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsRetrieveAnnotations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deprecation warning:  This endpoint will be deprecated in one of the next releases. Consider using new API: - POST /api/projects/<project_id>/backup/export to initiate backup process - GET /api/requests/<rq_id> to check process status,     where rq_id is request id returned on initializing request 
         * @summary Back up a project
         * @param {number} id A unique integer value identifying this project.
         * @param {ProjectsRetrieveBackupActionEnum} [action] Used to start downloading process after backup file had been created
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Backup file name
         * @param {ProjectsRetrieveBackupLocationEnum} [location] Where need to save downloaded backup
         * @param {boolean} [useDefaultLocation] Use the location that was configured in project to export backup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsRetrieveBackup(id: number, action?: ProjectsRetrieveBackupActionEnum, cloudStorageId?: number, filename?: string, location?: ProjectsRetrieveBackupLocationEnum, useDefaultLocation?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsRetrieveBackup(id, action, cloudStorageId, filename, location, useDefaultLocation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsRetrieveBackup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *  To check the status of the process of importing a project dataset from a file:  After initiating the dataset upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent GET /api/projects/id/dataset requests to track the status of the dataset import. Also you should specify action parameter: action=import_status.  Deprecation warning: Utilizing this endpoint to export project dataset in a specific format will be deprecated in one of the next releases. Consider using new API: - POST /api/projects/<project_id>/dataset/export/?save_images=True to initiate export process - GET /api/requests/<rq_id> to check process status,     where rq_id is request id returned on initializing request 
         * @summary Export a project as a dataset / Check dataset import status
         * @param {number} id A unique integer value identifying this project.
         * @param {ProjectsRetrieveDatasetActionEnum} [action] Used to start downloading process locally after annotation file has been created
         * @param {number} [cloudStorageId] Storage id
         * @param {string} [filename] Desired output file name
         * @param {string} [format] Desired output format name You can get the list of supported formats at: /server/annotation/formats
         * @param {ProjectsRetrieveDatasetLocationEnum} [location] Where need to save downloaded dataset
         * @param {string} [rqId] rq id
         * @param {boolean} [useDefaultLocation] Use the location that was configured in project to import dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsRetrieveDataset(id: number, action?: ProjectsRetrieveDatasetActionEnum, cloudStorageId?: number, filename?: string, format?: string, location?: ProjectsRetrieveDatasetLocationEnum, rqId?: string, useDefaultLocation?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsRetrieveDataset(id, action, cloudStorageId, filename, format, location, rqId, useDefaultLocation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsRetrieveDataset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a preview image for a project
         * @param {number} id A unique integer value identifying this project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsRetrievePreview(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsRetrievePreview(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsRetrievePreview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectsApiProjectsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreate(requestParameters: ProjectsApiProjectsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProjectRead> {
            return localVarFp.projectsCreate(requestParameters.projectWriteRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         *  The backup import process is as follows:  The first request POST /api/projects/backup will initiate file upload and will create the rq job on the server in which the process of a project creating from an uploaded backup will be carried out.  After initiating the backup upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent requests to track the status of the project creation. Once the project has been successfully created, the server will return the id of the newly created project. 
         * @summary Recreate a project from a backup
         * @param {ProjectsApiProjectsCreateBackupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreateBackup(requestParameters: ProjectsApiProjectsCreateBackupRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectsCreateBackup(requestParameters.xOrganization, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, requestParameters.org, requestParameters.orgId, requestParameters.rqId, requestParameters.backupWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The request `POST /api/<projects|tasks>/id/backup/export` will initialize a background process to backup a resource. To check status of the process please, use `GET /api/requests/<rq_id>` where **rq_id** is request ID returned in the response for this endpoint. 
         * @summary Initiate process to backup resource
         * @param {ProjectsApiProjectsCreateBackupExportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreateBackupExport(requestParameters: ProjectsApiProjectsCreateBackupExportRequest, options?: RawAxiosRequestConfig): AxiosPromise<RqId> {
            return localVarFp.projectsCreateBackupExport(requestParameters.id, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, options).then((request) => request(axios, basePath));
        },
        /**
         *  The request POST /api/projects/id/dataset initiates a background process to import dataset into a project. Please, use the GET /api/requests/<rq_id> endpoint for checking status of the process. The `rq_id` parameter can be found in the response on initiating request. 
         * @summary Import a dataset into a project
         * @param {ProjectsApiProjectsCreateDatasetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreateDataset(requestParameters: ProjectsApiProjectsCreateDatasetRequest, options?: RawAxiosRequestConfig): AxiosPromise<RqId> {
            return localVarFp.projectsCreateDataset(requestParameters.id, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.format, requestParameters.location, requestParameters.useDefaultLocation, requestParameters.datasetWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The request `POST /api/<projects|tasks|jobs>/id/dataset/export` will initialize a background process to export a dataset. To check status of the process please, use `GET /api/requests/<rq_id>` where **rq_id** is request ID returned in the response for this endpoint. 
         * @summary Initialize process to export resource as a dataset in a specific format
         * @param {ProjectsApiProjectsCreateDatasetExportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreateDatasetExport(requestParameters: ProjectsApiProjectsCreateDatasetExportRequest, options?: RawAxiosRequestConfig): AxiosPromise<RqId> {
            return localVarFp.projectsCreateDatasetExport(requestParameters.format, requestParameters.id, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, requestParameters.saveImages, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a project
         * @param {ProjectsApiProjectsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsDestroy(requestParameters: ProjectsApiProjectsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List projects
         * @param {ProjectsApiProjectsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsList(requestParameters: ProjectsApiProjectsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedProjectReadList> {
            return localVarFp.projectsList(requestParameters.xOrganization, requestParameters.assignee, requestParameters.filter, requestParameters.name, requestParameters.org, requestParameters.orgId, requestParameters.owner, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a project
         * @param {ProjectsApiProjectsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsPartialUpdate(requestParameters: ProjectsApiProjectsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProjectRead> {
            return localVarFp.projectsPartialUpdate(requestParameters.id, requestParameters.patchedProjectWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get project details
         * @param {ProjectsApiProjectsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsRetrieve(requestParameters: ProjectsApiProjectsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProjectRead> {
            return localVarFp.projectsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecation warning:  Using this endpoint to initiate export of annotations as a dataset or to check export status is deprecated. Consider using new API: - POST /api/projects/<project_id>/dataset/export?save_images=False to initiate exporting process - GET /api/requests/<rq_id> to check export status,     where rq_id is request id returned on initializing request\' 
         * @summary Export project annotations as a dataset
         * @param {ProjectsApiProjectsRetrieveAnnotationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsRetrieveAnnotations(requestParameters: ProjectsApiProjectsRetrieveAnnotationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationsRead> {
            return localVarFp.projectsRetrieveAnnotations(requestParameters.format, requestParameters.id, requestParameters.action, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, requestParameters.useDefaultLocation, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecation warning:  This endpoint will be deprecated in one of the next releases. Consider using new API: - POST /api/projects/<project_id>/backup/export to initiate backup process - GET /api/requests/<rq_id> to check process status,     where rq_id is request id returned on initializing request 
         * @summary Back up a project
         * @param {ProjectsApiProjectsRetrieveBackupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsRetrieveBackup(requestParameters: ProjectsApiProjectsRetrieveBackupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectsRetrieveBackup(requestParameters.id, requestParameters.action, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, requestParameters.useDefaultLocation, options).then((request) => request(axios, basePath));
        },
        /**
         *  To check the status of the process of importing a project dataset from a file:  After initiating the dataset upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent GET /api/projects/id/dataset requests to track the status of the dataset import. Also you should specify action parameter: action=import_status.  Deprecation warning: Utilizing this endpoint to export project dataset in a specific format will be deprecated in one of the next releases. Consider using new API: - POST /api/projects/<project_id>/dataset/export/?save_images=True to initiate export process - GET /api/requests/<rq_id> to check process status,     where rq_id is request id returned on initializing request 
         * @summary Export a project as a dataset / Check dataset import status
         * @param {ProjectsApiProjectsRetrieveDatasetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsRetrieveDataset(requestParameters: ProjectsApiProjectsRetrieveDatasetRequest, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.projectsRetrieveDataset(requestParameters.id, requestParameters.action, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.format, requestParameters.location, requestParameters.rqId, requestParameters.useDefaultLocation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a preview image for a project
         * @param {ProjectsApiProjectsRetrievePreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsRetrievePreview(requestParameters: ProjectsApiProjectsRetrievePreviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectsRetrievePreview(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for projectsCreate operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCreateRequest
 */
export interface ProjectsApiProjectsCreateRequest {
    /**
     * 
     * @type {ProjectWriteRequest}
     * @memberof ProjectsApiProjectsCreate
     */
    readonly projectWriteRequest: ProjectWriteRequest

    /**
     * Organization unique slug
     * @type {string}
     * @memberof ProjectsApiProjectsCreate
     */
    readonly xOrganization?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof ProjectsApiProjectsCreate
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof ProjectsApiProjectsCreate
     */
    readonly orgId?: number
}

/**
 * Request parameters for projectsCreateBackup operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCreateBackupRequest
 */
export interface ProjectsApiProjectsCreateBackupRequest {
    /**
     * Organization unique slug
     * @type {string}
     * @memberof ProjectsApiProjectsCreateBackup
     */
    readonly xOrganization?: string

    /**
     * Storage id
     * @type {number}
     * @memberof ProjectsApiProjectsCreateBackup
     */
    readonly cloudStorageId?: number

    /**
     * Backup file name
     * @type {string}
     * @memberof ProjectsApiProjectsCreateBackup
     */
    readonly filename?: string

    /**
     * Where to import the backup file from
     * @type {'cloud_storage' | 'local'}
     * @memberof ProjectsApiProjectsCreateBackup
     */
    readonly location?: ProjectsCreateBackupLocationEnum

    /**
     * Organization unique slug
     * @type {string}
     * @memberof ProjectsApiProjectsCreateBackup
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof ProjectsApiProjectsCreateBackup
     */
    readonly orgId?: number

    /**
     * rq id
     * @type {string}
     * @memberof ProjectsApiProjectsCreateBackup
     */
    readonly rqId?: string

    /**
     * 
     * @type {BackupWriteRequest}
     * @memberof ProjectsApiProjectsCreateBackup
     */
    readonly backupWriteRequest?: BackupWriteRequest | null
}

/**
 * Request parameters for projectsCreateBackupExport operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCreateBackupExportRequest
 */
export interface ProjectsApiProjectsCreateBackupExportRequest {
    /**
     * A unique integer value identifying this project.
     * @type {number}
     * @memberof ProjectsApiProjectsCreateBackupExport
     */
    readonly id: number

    /**
     * Storage id
     * @type {number}
     * @memberof ProjectsApiProjectsCreateBackupExport
     */
    readonly cloudStorageId?: number

    /**
     * Backup file name
     * @type {string}
     * @memberof ProjectsApiProjectsCreateBackupExport
     */
    readonly filename?: string

    /**
     * Where need to save downloaded backup
     * @type {'cloud_storage' | 'local'}
     * @memberof ProjectsApiProjectsCreateBackupExport
     */
    readonly location?: ProjectsCreateBackupExportLocationEnum
}

/**
 * Request parameters for projectsCreateDataset operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCreateDatasetRequest
 */
export interface ProjectsApiProjectsCreateDatasetRequest {
    /**
     * A unique integer value identifying this project.
     * @type {number}
     * @memberof ProjectsApiProjectsCreateDataset
     */
    readonly id: number

    /**
     * Storage id
     * @type {number}
     * @memberof ProjectsApiProjectsCreateDataset
     */
    readonly cloudStorageId?: number

    /**
     * Dataset file name
     * @type {string}
     * @memberof ProjectsApiProjectsCreateDataset
     */
    readonly filename?: string

    /**
     * Desired dataset format name You can get the list of supported formats at: /server/annotation/formats
     * @type {string}
     * @memberof ProjectsApiProjectsCreateDataset
     */
    readonly format?: string

    /**
     * Where to import the dataset from
     * @type {'cloud_storage' | 'local'}
     * @memberof ProjectsApiProjectsCreateDataset
     */
    readonly location?: ProjectsCreateDatasetLocationEnum

    /**
     * Use the location that was configured in the project to import annotations
     * @type {boolean}
     * @memberof ProjectsApiProjectsCreateDataset
     */
    readonly useDefaultLocation?: boolean

    /**
     * 
     * @type {DatasetWriteRequest}
     * @memberof ProjectsApiProjectsCreateDataset
     */
    readonly datasetWriteRequest?: DatasetWriteRequest | null
}

/**
 * Request parameters for projectsCreateDatasetExport operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCreateDatasetExportRequest
 */
export interface ProjectsApiProjectsCreateDatasetExportRequest {
    /**
     * Desired output format name You can get the list of supported formats at: /server/annotation/formats
     * @type {string}
     * @memberof ProjectsApiProjectsCreateDatasetExport
     */
    readonly format: string

    /**
     * A unique integer value identifying this project.
     * @type {number}
     * @memberof ProjectsApiProjectsCreateDatasetExport
     */
    readonly id: number

    /**
     * Storage id
     * @type {number}
     * @memberof ProjectsApiProjectsCreateDatasetExport
     */
    readonly cloudStorageId?: number

    /**
     * Desired output file name
     * @type {string}
     * @memberof ProjectsApiProjectsCreateDatasetExport
     */
    readonly filename?: string

    /**
     * Where need to save downloaded dataset
     * @type {'cloud_storage' | 'local'}
     * @memberof ProjectsApiProjectsCreateDatasetExport
     */
    readonly location?: ProjectsCreateDatasetExportLocationEnum

    /**
     * Include images or not
     * @type {boolean}
     * @memberof ProjectsApiProjectsCreateDatasetExport
     */
    readonly saveImages?: boolean
}

/**
 * Request parameters for projectsDestroy operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsDestroyRequest
 */
export interface ProjectsApiProjectsDestroyRequest {
    /**
     * A unique integer value identifying this project.
     * @type {number}
     * @memberof ProjectsApiProjectsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for projectsList operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsListRequest
 */
export interface ProjectsApiProjectsListRequest {
    /**
     * Organization unique slug
     * @type {string}
     * @memberof ProjectsApiProjectsList
     */
    readonly xOrganization?: string

    /**
     * A simple equality filter for the assignee field
     * @type {string}
     * @memberof ProjectsApiProjectsList
     */
    readonly assignee?: string

    /**
     *  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;name\&#39;, \&#39;owner\&#39;, \&#39;assignee\&#39;, \&#39;status\&#39;, \&#39;id\&#39;, \&#39;updated_date\&#39;].
     * @type {string}
     * @memberof ProjectsApiProjectsList
     */
    readonly filter?: string

    /**
     * A simple equality filter for the name field
     * @type {string}
     * @memberof ProjectsApiProjectsList
     */
    readonly name?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof ProjectsApiProjectsList
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof ProjectsApiProjectsList
     */
    readonly orgId?: number

    /**
     * A simple equality filter for the owner field
     * @type {string}
     * @memberof ProjectsApiProjectsList
     */
    readonly owner?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof ProjectsApiProjectsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ProjectsApiProjectsList
     */
    readonly pageSize?: number

    /**
     * A search term. Available search_fields: (\&#39;name\&#39;, \&#39;owner\&#39;, \&#39;assignee\&#39;, \&#39;status\&#39;)
     * @type {string}
     * @memberof ProjectsApiProjectsList
     */
    readonly search?: string

    /**
     * Which field to use when ordering the results. Available ordering_fields: [\&#39;name\&#39;, \&#39;owner\&#39;, \&#39;assignee\&#39;, \&#39;status\&#39;, \&#39;id\&#39;, \&#39;updated_date\&#39;]
     * @type {string}
     * @memberof ProjectsApiProjectsList
     */
    readonly sort?: string

    /**
     * A simple equality filter for the status field
     * @type {'annotation' | 'validation' | 'completed'}
     * @memberof ProjectsApiProjectsList
     */
    readonly status?: ProjectsListStatusEnum
}

/**
 * Request parameters for projectsPartialUpdate operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsPartialUpdateRequest
 */
export interface ProjectsApiProjectsPartialUpdateRequest {
    /**
     * A unique integer value identifying this project.
     * @type {number}
     * @memberof ProjectsApiProjectsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedProjectWriteRequest}
     * @memberof ProjectsApiProjectsPartialUpdate
     */
    readonly patchedProjectWriteRequest?: PatchedProjectWriteRequest
}

/**
 * Request parameters for projectsRetrieve operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsRetrieveRequest
 */
export interface ProjectsApiProjectsRetrieveRequest {
    /**
     * A unique integer value identifying this project.
     * @type {number}
     * @memberof ProjectsApiProjectsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for projectsRetrieveAnnotations operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsRetrieveAnnotationsRequest
 */
export interface ProjectsApiProjectsRetrieveAnnotationsRequest {
    /**
     * Desired output format name You can get the list of supported formats at: /server/annotation/formats
     * @type {string}
     * @memberof ProjectsApiProjectsRetrieveAnnotations
     */
    readonly format: string

    /**
     * A unique integer value identifying this project.
     * @type {number}
     * @memberof ProjectsApiProjectsRetrieveAnnotations
     */
    readonly id: number

    /**
     * Used to start downloading process locally after annotation file has been created
     * @type {'download'}
     * @memberof ProjectsApiProjectsRetrieveAnnotations
     */
    readonly action?: ProjectsRetrieveAnnotationsActionEnum

    /**
     * Storage id
     * @type {number}
     * @memberof ProjectsApiProjectsRetrieveAnnotations
     */
    readonly cloudStorageId?: number

    /**
     * Desired output file name
     * @type {string}
     * @memberof ProjectsApiProjectsRetrieveAnnotations
     */
    readonly filename?: string

    /**
     * Where need to save downloaded dataset
     * @type {'cloud_storage' | 'local'}
     * @memberof ProjectsApiProjectsRetrieveAnnotations
     */
    readonly location?: ProjectsRetrieveAnnotationsLocationEnum

    /**
     * Use the location that was configured in project to export annotation
     * @type {boolean}
     * @memberof ProjectsApiProjectsRetrieveAnnotations
     */
    readonly useDefaultLocation?: boolean
}

/**
 * Request parameters for projectsRetrieveBackup operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsRetrieveBackupRequest
 */
export interface ProjectsApiProjectsRetrieveBackupRequest {
    /**
     * A unique integer value identifying this project.
     * @type {number}
     * @memberof ProjectsApiProjectsRetrieveBackup
     */
    readonly id: number

    /**
     * Used to start downloading process after backup file had been created
     * @type {'download'}
     * @memberof ProjectsApiProjectsRetrieveBackup
     */
    readonly action?: ProjectsRetrieveBackupActionEnum

    /**
     * Storage id
     * @type {number}
     * @memberof ProjectsApiProjectsRetrieveBackup
     */
    readonly cloudStorageId?: number

    /**
     * Backup file name
     * @type {string}
     * @memberof ProjectsApiProjectsRetrieveBackup
     */
    readonly filename?: string

    /**
     * Where need to save downloaded backup
     * @type {'cloud_storage' | 'local'}
     * @memberof ProjectsApiProjectsRetrieveBackup
     */
    readonly location?: ProjectsRetrieveBackupLocationEnum

    /**
     * Use the location that was configured in project to export backup
     * @type {boolean}
     * @memberof ProjectsApiProjectsRetrieveBackup
     */
    readonly useDefaultLocation?: boolean
}

/**
 * Request parameters for projectsRetrieveDataset operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsRetrieveDatasetRequest
 */
export interface ProjectsApiProjectsRetrieveDatasetRequest {
    /**
     * A unique integer value identifying this project.
     * @type {number}
     * @memberof ProjectsApiProjectsRetrieveDataset
     */
    readonly id: number

    /**
     * Used to start downloading process locally after annotation file has been created
     * @type {'download' | 'import_status'}
     * @memberof ProjectsApiProjectsRetrieveDataset
     */
    readonly action?: ProjectsRetrieveDatasetActionEnum

    /**
     * Storage id
     * @type {number}
     * @memberof ProjectsApiProjectsRetrieveDataset
     */
    readonly cloudStorageId?: number

    /**
     * Desired output file name
     * @type {string}
     * @memberof ProjectsApiProjectsRetrieveDataset
     */
    readonly filename?: string

    /**
     * Desired output format name You can get the list of supported formats at: /server/annotation/formats
     * @type {string}
     * @memberof ProjectsApiProjectsRetrieveDataset
     */
    readonly format?: string

    /**
     * Where need to save downloaded dataset
     * @type {'cloud_storage' | 'local'}
     * @memberof ProjectsApiProjectsRetrieveDataset
     */
    readonly location?: ProjectsRetrieveDatasetLocationEnum

    /**
     * rq id
     * @type {string}
     * @memberof ProjectsApiProjectsRetrieveDataset
     */
    readonly rqId?: string

    /**
     * Use the location that was configured in project to import dataset
     * @type {boolean}
     * @memberof ProjectsApiProjectsRetrieveDataset
     */
    readonly useDefaultLocation?: boolean
}

/**
 * Request parameters for projectsRetrievePreview operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsRetrievePreviewRequest
 */
export interface ProjectsApiProjectsRetrievePreviewRequest {
    /**
     * A unique integer value identifying this project.
     * @type {number}
     * @memberof ProjectsApiProjectsRetrievePreview
     */
    readonly id: number
}

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * 
     * @summary Create a project
     * @param {ProjectsApiProjectsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCreate(requestParameters: ProjectsApiProjectsCreateRequest, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCreate(requestParameters.projectWriteRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  The backup import process is as follows:  The first request POST /api/projects/backup will initiate file upload and will create the rq job on the server in which the process of a project creating from an uploaded backup will be carried out.  After initiating the backup upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent requests to track the status of the project creation. Once the project has been successfully created, the server will return the id of the newly created project. 
     * @summary Recreate a project from a backup
     * @param {ProjectsApiProjectsCreateBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCreateBackup(requestParameters: ProjectsApiProjectsCreateBackupRequest = {}, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCreateBackup(requestParameters.xOrganization, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, requestParameters.org, requestParameters.orgId, requestParameters.rqId, requestParameters.backupWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The request `POST /api/<projects|tasks>/id/backup/export` will initialize a background process to backup a resource. To check status of the process please, use `GET /api/requests/<rq_id>` where **rq_id** is request ID returned in the response for this endpoint. 
     * @summary Initiate process to backup resource
     * @param {ProjectsApiProjectsCreateBackupExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCreateBackupExport(requestParameters: ProjectsApiProjectsCreateBackupExportRequest, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCreateBackupExport(requestParameters.id, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  The request POST /api/projects/id/dataset initiates a background process to import dataset into a project. Please, use the GET /api/requests/<rq_id> endpoint for checking status of the process. The `rq_id` parameter can be found in the response on initiating request. 
     * @summary Import a dataset into a project
     * @param {ProjectsApiProjectsCreateDatasetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCreateDataset(requestParameters: ProjectsApiProjectsCreateDatasetRequest, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCreateDataset(requestParameters.id, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.format, requestParameters.location, requestParameters.useDefaultLocation, requestParameters.datasetWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The request `POST /api/<projects|tasks|jobs>/id/dataset/export` will initialize a background process to export a dataset. To check status of the process please, use `GET /api/requests/<rq_id>` where **rq_id** is request ID returned in the response for this endpoint. 
     * @summary Initialize process to export resource as a dataset in a specific format
     * @param {ProjectsApiProjectsCreateDatasetExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCreateDatasetExport(requestParameters: ProjectsApiProjectsCreateDatasetExportRequest, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCreateDatasetExport(requestParameters.format, requestParameters.id, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, requestParameters.saveImages, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a project
     * @param {ProjectsApiProjectsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsDestroy(requestParameters: ProjectsApiProjectsDestroyRequest, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List projects
     * @param {ProjectsApiProjectsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsList(requestParameters: ProjectsApiProjectsListRequest = {}, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsList(requestParameters.xOrganization, requestParameters.assignee, requestParameters.filter, requestParameters.name, requestParameters.org, requestParameters.orgId, requestParameters.owner, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a project
     * @param {ProjectsApiProjectsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsPartialUpdate(requestParameters: ProjectsApiProjectsPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsPartialUpdate(requestParameters.id, requestParameters.patchedProjectWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get project details
     * @param {ProjectsApiProjectsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsRetrieve(requestParameters: ProjectsApiProjectsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecation warning:  Using this endpoint to initiate export of annotations as a dataset or to check export status is deprecated. Consider using new API: - POST /api/projects/<project_id>/dataset/export?save_images=False to initiate exporting process - GET /api/requests/<rq_id> to check export status,     where rq_id is request id returned on initializing request\' 
     * @summary Export project annotations as a dataset
     * @param {ProjectsApiProjectsRetrieveAnnotationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsRetrieveAnnotations(requestParameters: ProjectsApiProjectsRetrieveAnnotationsRequest, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsRetrieveAnnotations(requestParameters.format, requestParameters.id, requestParameters.action, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, requestParameters.useDefaultLocation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecation warning:  This endpoint will be deprecated in one of the next releases. Consider using new API: - POST /api/projects/<project_id>/backup/export to initiate backup process - GET /api/requests/<rq_id> to check process status,     where rq_id is request id returned on initializing request 
     * @summary Back up a project
     * @param {ProjectsApiProjectsRetrieveBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsRetrieveBackup(requestParameters: ProjectsApiProjectsRetrieveBackupRequest, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsRetrieveBackup(requestParameters.id, requestParameters.action, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.location, requestParameters.useDefaultLocation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  To check the status of the process of importing a project dataset from a file:  After initiating the dataset upload, you will receive an rq_id parameter. Make sure to include this parameter as a query parameter in your subsequent GET /api/projects/id/dataset requests to track the status of the dataset import. Also you should specify action parameter: action=import_status.  Deprecation warning: Utilizing this endpoint to export project dataset in a specific format will be deprecated in one of the next releases. Consider using new API: - POST /api/projects/<project_id>/dataset/export/?save_images=True to initiate export process - GET /api/requests/<rq_id> to check process status,     where rq_id is request id returned on initializing request 
     * @summary Export a project as a dataset / Check dataset import status
     * @param {ProjectsApiProjectsRetrieveDatasetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsRetrieveDataset(requestParameters: ProjectsApiProjectsRetrieveDatasetRequest, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsRetrieveDataset(requestParameters.id, requestParameters.action, requestParameters.cloudStorageId, requestParameters.filename, requestParameters.format, requestParameters.location, requestParameters.rqId, requestParameters.useDefaultLocation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a preview image for a project
     * @param {ProjectsApiProjectsRetrievePreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsRetrievePreview(requestParameters: ProjectsApiProjectsRetrievePreviewRequest, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsRetrievePreview(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ProjectsCreateBackupLocationEnum = {
    CloudStorage: 'cloud_storage',
    Local: 'local'
} as const;
export type ProjectsCreateBackupLocationEnum = typeof ProjectsCreateBackupLocationEnum[keyof typeof ProjectsCreateBackupLocationEnum];
/**
 * @export
 */
export const ProjectsCreateBackupExportLocationEnum = {
    CloudStorage: 'cloud_storage',
    Local: 'local'
} as const;
export type ProjectsCreateBackupExportLocationEnum = typeof ProjectsCreateBackupExportLocationEnum[keyof typeof ProjectsCreateBackupExportLocationEnum];
/**
 * @export
 */
export const ProjectsCreateDatasetLocationEnum = {
    CloudStorage: 'cloud_storage',
    Local: 'local'
} as const;
export type ProjectsCreateDatasetLocationEnum = typeof ProjectsCreateDatasetLocationEnum[keyof typeof ProjectsCreateDatasetLocationEnum];
/**
 * @export
 */
export const ProjectsCreateDatasetExportLocationEnum = {
    CloudStorage: 'cloud_storage',
    Local: 'local'
} as const;
export type ProjectsCreateDatasetExportLocationEnum = typeof ProjectsCreateDatasetExportLocationEnum[keyof typeof ProjectsCreateDatasetExportLocationEnum];
/**
 * @export
 */
export const ProjectsListStatusEnum = {
    Annotation: 'annotation',
    Validation: 'validation',
    Completed: 'completed'
} as const;
export type ProjectsListStatusEnum = typeof ProjectsListStatusEnum[keyof typeof ProjectsListStatusEnum];
/**
 * @export
 */
export const ProjectsRetrieveAnnotationsActionEnum = {
    Download: 'download'
} as const;
export type ProjectsRetrieveAnnotationsActionEnum = typeof ProjectsRetrieveAnnotationsActionEnum[keyof typeof ProjectsRetrieveAnnotationsActionEnum];
/**
 * @export
 */
export const ProjectsRetrieveAnnotationsLocationEnum = {
    CloudStorage: 'cloud_storage',
    Local: 'local'
} as const;
export type ProjectsRetrieveAnnotationsLocationEnum = typeof ProjectsRetrieveAnnotationsLocationEnum[keyof typeof ProjectsRetrieveAnnotationsLocationEnum];
/**
 * @export
 */
export const ProjectsRetrieveBackupActionEnum = {
    Download: 'download'
} as const;
export type ProjectsRetrieveBackupActionEnum = typeof ProjectsRetrieveBackupActionEnum[keyof typeof ProjectsRetrieveBackupActionEnum];
/**
 * @export
 */
export const ProjectsRetrieveBackupLocationEnum = {
    CloudStorage: 'cloud_storage',
    Local: 'local'
} as const;
export type ProjectsRetrieveBackupLocationEnum = typeof ProjectsRetrieveBackupLocationEnum[keyof typeof ProjectsRetrieveBackupLocationEnum];
/**
 * @export
 */
export const ProjectsRetrieveDatasetActionEnum = {
    Download: 'download',
    ImportStatus: 'import_status'
} as const;
export type ProjectsRetrieveDatasetActionEnum = typeof ProjectsRetrieveDatasetActionEnum[keyof typeof ProjectsRetrieveDatasetActionEnum];
/**
 * @export
 */
export const ProjectsRetrieveDatasetLocationEnum = {
    CloudStorage: 'cloud_storage',
    Local: 'local'
} as const;
export type ProjectsRetrieveDatasetLocationEnum = typeof ProjectsRetrieveDatasetLocationEnum[keyof typeof ProjectsRetrieveDatasetLocationEnum];
