/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnalyticsReport } from '../models';
// @ts-ignore
import { AnalyticsReportCreateRequest } from '../models';
// @ts-ignore
import { RqId } from '../models';
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export const AnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a analytics report asynchronously and allows to check request status
         * @param {string} [rqId] The report creation request id. Can be specified to check the report creation status. 
         * @param {AnalyticsReportCreateRequest} [analyticsReportCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsCreateReport: async (rqId?: string, analyticsReportCreateRequest?: AnalyticsReportCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/analytics/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (rqId !== undefined) {
                localVarQueryParameter['rq_id'] = rqId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(analyticsReportCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Receive analytics report
         * @summary Method returns analytics report
         * @param {string} [endDate] Specify the end date for filtering report data.
         * @param {number} [jobId] Specify job ID
         * @param {number} [projectId] Specify project ID
         * @param {string} [startDate] Specify a start date for filtering report data.
         * @param {number} [taskId] Specify task ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsGetReports: async (endDate?: string, jobId?: number, projectId?: number, startDate?: string, taskId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/analytics/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export const AnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a analytics report asynchronously and allows to check request status
         * @param {string} [rqId] The report creation request id. Can be specified to check the report creation status. 
         * @param {AnalyticsReportCreateRequest} [analyticsReportCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsCreateReport(rqId?: string, analyticsReportCreateRequest?: AnalyticsReportCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsCreateReport(rqId, analyticsReportCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Receive analytics report
         * @summary Method returns analytics report
         * @param {string} [endDate] Specify the end date for filtering report data.
         * @param {number} [jobId] Specify job ID
         * @param {number} [projectId] Specify project ID
         * @param {string} [startDate] Specify a start date for filtering report data.
         * @param {number} [taskId] Specify task ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsGetReports(endDate?: string, jobId?: number, projectId?: number, startDate?: string, taskId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyticsReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsGetReports(endDate, jobId, projectId, startDate, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnalyticsApi - factory interface
 * @export
 */
export const AnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnalyticsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a analytics report asynchronously and allows to check request status
         * @param {AnalyticsApiAnalyticsCreateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsCreateReport(requestParameters: AnalyticsApiAnalyticsCreateReportRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsCreateReport(requestParameters.rqId, requestParameters.analyticsReportCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Receive analytics report
         * @summary Method returns analytics report
         * @param {AnalyticsApiAnalyticsGetReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsGetReports(requestParameters: AnalyticsApiAnalyticsGetReportsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AnalyticsReport> {
            return localVarFp.analyticsGetReports(requestParameters.endDate, requestParameters.jobId, requestParameters.projectId, requestParameters.startDate, requestParameters.taskId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for analyticsCreateReport operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiAnalyticsCreateReportRequest
 */
export interface AnalyticsApiAnalyticsCreateReportRequest {
    /**
     * The report creation request id. Can be specified to check the report creation status. 
     * @type {string}
     * @memberof AnalyticsApiAnalyticsCreateReport
     */
    readonly rqId?: string

    /**
     * 
     * @type {AnalyticsReportCreateRequest}
     * @memberof AnalyticsApiAnalyticsCreateReport
     */
    readonly analyticsReportCreateRequest?: AnalyticsReportCreateRequest
}

/**
 * Request parameters for analyticsGetReports operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiAnalyticsGetReportsRequest
 */
export interface AnalyticsApiAnalyticsGetReportsRequest {
    /**
     * Specify the end date for filtering report data.
     * @type {string}
     * @memberof AnalyticsApiAnalyticsGetReports
     */
    readonly endDate?: string

    /**
     * Specify job ID
     * @type {number}
     * @memberof AnalyticsApiAnalyticsGetReports
     */
    readonly jobId?: number

    /**
     * Specify project ID
     * @type {number}
     * @memberof AnalyticsApiAnalyticsGetReports
     */
    readonly projectId?: number

    /**
     * Specify a start date for filtering report data.
     * @type {string}
     * @memberof AnalyticsApiAnalyticsGetReports
     */
    readonly startDate?: string

    /**
     * Specify task ID
     * @type {number}
     * @memberof AnalyticsApiAnalyticsGetReports
     */
    readonly taskId?: number
}

/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export class AnalyticsApi extends BaseAPI {
    /**
     * 
     * @summary Creates a analytics report asynchronously and allows to check request status
     * @param {AnalyticsApiAnalyticsCreateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsCreateReport(requestParameters: AnalyticsApiAnalyticsCreateReportRequest = {}, options?: AxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsCreateReport(requestParameters.rqId, requestParameters.analyticsReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Receive analytics report
     * @summary Method returns analytics report
     * @param {AnalyticsApiAnalyticsGetReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsGetReports(requestParameters: AnalyticsApiAnalyticsGetReportsRequest = {}, options?: AxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsGetReports(requestParameters.endDate, requestParameters.jobId, requestParameters.projectId, requestParameters.startDate, requestParameters.taskId, options).then((request) => request(this.axios, this.basePath));
    }
}

