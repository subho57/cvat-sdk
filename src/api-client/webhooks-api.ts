/* tslint:disable */
/* eslint-disable */
/**
 * CVAT REST API
 * REST API for Computer Vision Annotation Tool (CVAT)
 *
 * The version of the OpenAPI document: 2.9.1
 * Contact: support@cvat.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Events } from '../models';
// @ts-ignore
import { PaginatedWebhookDeliveryReadList } from '../models';
// @ts-ignore
import { PaginatedWebhookReadList } from '../models';
// @ts-ignore
import { PatchedWebhookWriteRequest } from '../models';
// @ts-ignore
import { WebhookDeliveryRead } from '../models';
// @ts-ignore
import { WebhookRead } from '../models';
// @ts-ignore
import { WebhookWriteRequest } from '../models';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Method creates a webhook
         * @param {WebhookWriteRequest} webhookWriteRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksCreate: async (webhookWriteRequest: WebhookWriteRequest, xOrganization?: string, org?: string, orgId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookWriteRequest' is not null or undefined
            assertParamExists('webhooksCreate', 'webhookWriteRequest', webhookWriteRequest)
            const localVarPath = `/api/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method redeliver a specific webhook delivery
         * @param {string} deliveryId 
         * @param {number} id A unique integer value identifying this webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksCreateDeliveriesRedelivery: async (deliveryId: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deliveryId' is not null or undefined
            assertParamExists('webhooksCreateDeliveriesRedelivery', 'deliveryId', deliveryId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksCreateDeliveriesRedelivery', 'id', id)
            const localVarPath = `/api/webhooks/{id}/deliveries/{delivery_id}/redelivery`
                .replace(`{${"delivery_id"}}`, encodeURIComponent(String(deliveryId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method send ping webhook
         * @param {number} id A unique integer value identifying this webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksCreatePing: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksCreatePing', 'id', id)
            const localVarPath = `/api/webhooks/{id}/ping`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method deletes a webhook
         * @param {number} id A unique integer value identifying this webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksDestroy', 'id', id)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns a paginated list of webhook according to query parameters
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;target_url\&#39;, \&#39;owner\&#39;, \&#39;type\&#39;, \&#39;description\&#39;, \&#39;id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;].
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {string} [owner] A simple equality filter for the owner field
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [projectId] A simple equality filter for the project_id field
         * @param {string} [search] A search term. Available search_fields: (\&#39;target_url\&#39;, \&#39;owner\&#39;, \&#39;type\&#39;, \&#39;description\&#39;)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;target_url\&#39;, \&#39;owner\&#39;, \&#39;type\&#39;, \&#39;description\&#39;, \&#39;id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;]
         * @param {string} [targetUrl] A simple equality filter for the target_url field
         * @param {WebhooksListTypeEnum} [type] A simple equality filter for the type field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksList: async (xOrganization?: string, filter?: string, org?: string, orgId?: number, owner?: string, page?: number, pageSize?: number, projectId?: number, search?: string, sort?: string, targetUrl?: string, type?: WebhooksListTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (targetUrl !== undefined) {
                localVarQueryParameter['target_url'] = targetUrl;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (xOrganization != null) {
                localVarHeaderParameter['X-Organization'] = String(xOrganization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method return a list of deliveries for a specific webhook
         * @param {number} id A unique integer value identifying this webhook.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksListDeliveries: async (id: number, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksListDeliveries', 'id', id)
            const localVarPath = `/api/webhooks/{id}/deliveries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in a webhook
         * @param {number} id A unique integer value identifying this webhook.
         * @param {PatchedWebhookWriteRequest} [patchedWebhookWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksPartialUpdate: async (id: number, patchedWebhookWriteRequest?: PatchedWebhookWriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksPartialUpdate', 'id', id)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedWebhookWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method returns details of a webhook
         * @param {number} id A unique integer value identifying this webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksRetrieve', 'id', id)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method return a specific delivery for a specific webhook
         * @param {string} deliveryId 
         * @param {number} id A unique integer value identifying this webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksRetrieveDeliveries: async (deliveryId: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deliveryId' is not null or undefined
            assertParamExists('webhooksRetrieveDeliveries', 'deliveryId', deliveryId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksRetrieveDeliveries', 'id', id)
            const localVarPath = `/api/webhooks/{id}/deliveries/{delivery_id}`
                .replace(`{${"delivery_id"}}`, encodeURIComponent(String(deliveryId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method return a list of available webhook events
         * @param {string} [type] Type of webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksRetrieveEvents: async (type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/webhooks/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Method updates a webhook by id
         * @param {number} id A unique integer value identifying this webhook.
         * @param {WebhookWriteRequest} webhookWriteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksUpdate: async (id: number, webhookWriteRequest: WebhookWriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksUpdate', 'id', id)
            // verify required parameter 'webhookWriteRequest' is not null or undefined
            assertParamExists('webhooksUpdate', 'webhookWriteRequest', webhookWriteRequest)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication signatureAuth required
            await setApiKeyToObject(localVarQueryParameter, "sign", configuration)

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication csrfAuth required

            // authentication sessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookWriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Method creates a webhook
         * @param {WebhookWriteRequest} webhookWriteRequest 
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksCreate(webhookWriteRequest: WebhookWriteRequest, xOrganization?: string, org?: string, orgId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksCreate(webhookWriteRequest, xOrganization, org, orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method redeliver a specific webhook delivery
         * @param {string} deliveryId 
         * @param {number} id A unique integer value identifying this webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksCreateDeliveriesRedelivery(deliveryId: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksCreateDeliveriesRedelivery(deliveryId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method send ping webhook
         * @param {number} id A unique integer value identifying this webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksCreatePing(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookDeliveryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksCreatePing(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method deletes a webhook
         * @param {number} id A unique integer value identifying this webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns a paginated list of webhook according to query parameters
         * @param {string} [xOrganization] Organization unique slug
         * @param {string} [filter]  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;target_url\&#39;, \&#39;owner\&#39;, \&#39;type\&#39;, \&#39;description\&#39;, \&#39;id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;].
         * @param {string} [org] Organization unique slug
         * @param {number} [orgId] Organization identifier
         * @param {string} [owner] A simple equality filter for the owner field
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [projectId] A simple equality filter for the project_id field
         * @param {string} [search] A search term. Available search_fields: (\&#39;target_url\&#39;, \&#39;owner\&#39;, \&#39;type\&#39;, \&#39;description\&#39;)
         * @param {string} [sort] Which field to use when ordering the results. Available ordering_fields: [\&#39;target_url\&#39;, \&#39;owner\&#39;, \&#39;type\&#39;, \&#39;description\&#39;, \&#39;id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;]
         * @param {string} [targetUrl] A simple equality filter for the target_url field
         * @param {WebhooksListTypeEnum} [type] A simple equality filter for the type field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksList(xOrganization?: string, filter?: string, org?: string, orgId?: number, owner?: string, page?: number, pageSize?: number, projectId?: number, search?: string, sort?: string, targetUrl?: string, type?: WebhooksListTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedWebhookReadList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksList(xOrganization, filter, org, orgId, owner, page, pageSize, projectId, search, sort, targetUrl, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method return a list of deliveries for a specific webhook
         * @param {number} id A unique integer value identifying this webhook.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksListDeliveries(id: number, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedWebhookDeliveryReadList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksListDeliveries(id, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in a webhook
         * @param {number} id A unique integer value identifying this webhook.
         * @param {PatchedWebhookWriteRequest} [patchedWebhookWriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksPartialUpdate(id: number, patchedWebhookWriteRequest?: PatchedWebhookWriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksPartialUpdate(id, patchedWebhookWriteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method returns details of a webhook
         * @param {number} id A unique integer value identifying this webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method return a specific delivery for a specific webhook
         * @param {string} deliveryId 
         * @param {number} id A unique integer value identifying this webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksRetrieveDeliveries(deliveryId: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookDeliveryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksRetrieveDeliveries(deliveryId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method return a list of available webhook events
         * @param {string} [type] Type of webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksRetrieveEvents(type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Events>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksRetrieveEvents(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Method updates a webhook by id
         * @param {number} id A unique integer value identifying this webhook.
         * @param {WebhookWriteRequest} webhookWriteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksUpdate(id: number, webhookWriteRequest: WebhookWriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksUpdate(id, webhookWriteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * 
         * @summary Method creates a webhook
         * @param {WebhooksApiWebhooksCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksCreate(requestParameters: WebhooksApiWebhooksCreateRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookRead> {
            return localVarFp.webhooksCreate(requestParameters.webhookWriteRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method redeliver a specific webhook delivery
         * @param {WebhooksApiWebhooksCreateDeliveriesRedeliveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksCreateDeliveriesRedelivery(requestParameters: WebhooksApiWebhooksCreateDeliveriesRedeliveryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.webhooksCreateDeliveriesRedelivery(requestParameters.deliveryId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method send ping webhook
         * @param {WebhooksApiWebhooksCreatePingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksCreatePing(requestParameters: WebhooksApiWebhooksCreatePingRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookDeliveryRead> {
            return localVarFp.webhooksCreatePing(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method deletes a webhook
         * @param {WebhooksApiWebhooksDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksDestroy(requestParameters: WebhooksApiWebhooksDestroyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.webhooksDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns a paginated list of webhook according to query parameters
         * @param {WebhooksApiWebhooksListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksList(requestParameters: WebhooksApiWebhooksListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedWebhookReadList> {
            return localVarFp.webhooksList(requestParameters.xOrganization, requestParameters.filter, requestParameters.org, requestParameters.orgId, requestParameters.owner, requestParameters.page, requestParameters.pageSize, requestParameters.projectId, requestParameters.search, requestParameters.sort, requestParameters.targetUrl, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method return a list of deliveries for a specific webhook
         * @param {WebhooksApiWebhooksListDeliveriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksListDeliveries(requestParameters: WebhooksApiWebhooksListDeliveriesRequest, options?: AxiosRequestConfig): AxiosPromise<PaginatedWebhookDeliveryReadList> {
            return localVarFp.webhooksListDeliveries(requestParameters.id, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Methods does a partial update of chosen fields in a webhook
         * @param {WebhooksApiWebhooksPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksPartialUpdate(requestParameters: WebhooksApiWebhooksPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookRead> {
            return localVarFp.webhooksPartialUpdate(requestParameters.id, requestParameters.patchedWebhookWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method returns details of a webhook
         * @param {WebhooksApiWebhooksRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksRetrieve(requestParameters: WebhooksApiWebhooksRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookRead> {
            return localVarFp.webhooksRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method return a specific delivery for a specific webhook
         * @param {WebhooksApiWebhooksRetrieveDeliveriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksRetrieveDeliveries(requestParameters: WebhooksApiWebhooksRetrieveDeliveriesRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookDeliveryRead> {
            return localVarFp.webhooksRetrieveDeliveries(requestParameters.deliveryId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method return a list of available webhook events
         * @param {WebhooksApiWebhooksRetrieveEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksRetrieveEvents(requestParameters: WebhooksApiWebhooksRetrieveEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Events> {
            return localVarFp.webhooksRetrieveEvents(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Method updates a webhook by id
         * @param {WebhooksApiWebhooksUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksUpdate(requestParameters: WebhooksApiWebhooksUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookRead> {
            return localVarFp.webhooksUpdate(requestParameters.id, requestParameters.webhookWriteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for webhooksCreate operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksCreateRequest
 */
export interface WebhooksApiWebhooksCreateRequest {
    /**
     * 
     * @type {WebhookWriteRequest}
     * @memberof WebhooksApiWebhooksCreate
     */
    readonly webhookWriteRequest: WebhookWriteRequest

    /**
     * Organization unique slug
     * @type {string}
     * @memberof WebhooksApiWebhooksCreate
     */
    readonly xOrganization?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof WebhooksApiWebhooksCreate
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof WebhooksApiWebhooksCreate
     */
    readonly orgId?: number
}

/**
 * Request parameters for webhooksCreateDeliveriesRedelivery operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksCreateDeliveriesRedeliveryRequest
 */
export interface WebhooksApiWebhooksCreateDeliveriesRedeliveryRequest {
    /**
     * 
     * @type {string}
     * @memberof WebhooksApiWebhooksCreateDeliveriesRedelivery
     */
    readonly deliveryId: string

    /**
     * A unique integer value identifying this webhook.
     * @type {number}
     * @memberof WebhooksApiWebhooksCreateDeliveriesRedelivery
     */
    readonly id: number
}

/**
 * Request parameters for webhooksCreatePing operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksCreatePingRequest
 */
export interface WebhooksApiWebhooksCreatePingRequest {
    /**
     * A unique integer value identifying this webhook.
     * @type {number}
     * @memberof WebhooksApiWebhooksCreatePing
     */
    readonly id: number
}

/**
 * Request parameters for webhooksDestroy operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksDestroyRequest
 */
export interface WebhooksApiWebhooksDestroyRequest {
    /**
     * A unique integer value identifying this webhook.
     * @type {number}
     * @memberof WebhooksApiWebhooksDestroy
     */
    readonly id: number
}

/**
 * Request parameters for webhooksList operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksListRequest
 */
export interface WebhooksApiWebhooksListRequest {
    /**
     * Organization unique slug
     * @type {string}
     * @memberof WebhooksApiWebhooksList
     */
    readonly xOrganization?: string

    /**
     *  JSON Logic filter. This filter can be used to perform complex filtering by grouping rules.  For example, using such a filter you can get all resources created by you:      - {\&quot;and\&quot;:[{\&quot;&#x3D;&#x3D;\&quot;:[{\&quot;var\&quot;:\&quot;owner\&quot;},\&quot;&lt;user&gt;\&quot;]}]}  Details about the syntax used can be found at the link: https://jsonlogic.com/   Available filter_fields: [\&#39;target_url\&#39;, \&#39;owner\&#39;, \&#39;type\&#39;, \&#39;description\&#39;, \&#39;id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;].
     * @type {string}
     * @memberof WebhooksApiWebhooksList
     */
    readonly filter?: string

    /**
     * Organization unique slug
     * @type {string}
     * @memberof WebhooksApiWebhooksList
     */
    readonly org?: string

    /**
     * Organization identifier
     * @type {number}
     * @memberof WebhooksApiWebhooksList
     */
    readonly orgId?: number

    /**
     * A simple equality filter for the owner field
     * @type {string}
     * @memberof WebhooksApiWebhooksList
     */
    readonly owner?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof WebhooksApiWebhooksList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof WebhooksApiWebhooksList
     */
    readonly pageSize?: number

    /**
     * A simple equality filter for the project_id field
     * @type {number}
     * @memberof WebhooksApiWebhooksList
     */
    readonly projectId?: number

    /**
     * A search term. Available search_fields: (\&#39;target_url\&#39;, \&#39;owner\&#39;, \&#39;type\&#39;, \&#39;description\&#39;)
     * @type {string}
     * @memberof WebhooksApiWebhooksList
     */
    readonly search?: string

    /**
     * Which field to use when ordering the results. Available ordering_fields: [\&#39;target_url\&#39;, \&#39;owner\&#39;, \&#39;type\&#39;, \&#39;description\&#39;, \&#39;id\&#39;, \&#39;project_id\&#39;, \&#39;updated_date\&#39;]
     * @type {string}
     * @memberof WebhooksApiWebhooksList
     */
    readonly sort?: string

    /**
     * A simple equality filter for the target_url field
     * @type {string}
     * @memberof WebhooksApiWebhooksList
     */
    readonly targetUrl?: string

    /**
     * A simple equality filter for the type field
     * @type {'organization' | 'project'}
     * @memberof WebhooksApiWebhooksList
     */
    readonly type?: WebhooksListTypeEnum
}

/**
 * Request parameters for webhooksListDeliveries operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksListDeliveriesRequest
 */
export interface WebhooksApiWebhooksListDeliveriesRequest {
    /**
     * A unique integer value identifying this webhook.
     * @type {number}
     * @memberof WebhooksApiWebhooksListDeliveries
     */
    readonly id: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof WebhooksApiWebhooksListDeliveries
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof WebhooksApiWebhooksListDeliveries
     */
    readonly pageSize?: number
}

/**
 * Request parameters for webhooksPartialUpdate operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksPartialUpdateRequest
 */
export interface WebhooksApiWebhooksPartialUpdateRequest {
    /**
     * A unique integer value identifying this webhook.
     * @type {number}
     * @memberof WebhooksApiWebhooksPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedWebhookWriteRequest}
     * @memberof WebhooksApiWebhooksPartialUpdate
     */
    readonly patchedWebhookWriteRequest?: PatchedWebhookWriteRequest
}

/**
 * Request parameters for webhooksRetrieve operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksRetrieveRequest
 */
export interface WebhooksApiWebhooksRetrieveRequest {
    /**
     * A unique integer value identifying this webhook.
     * @type {number}
     * @memberof WebhooksApiWebhooksRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for webhooksRetrieveDeliveries operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksRetrieveDeliveriesRequest
 */
export interface WebhooksApiWebhooksRetrieveDeliveriesRequest {
    /**
     * 
     * @type {string}
     * @memberof WebhooksApiWebhooksRetrieveDeliveries
     */
    readonly deliveryId: string

    /**
     * A unique integer value identifying this webhook.
     * @type {number}
     * @memberof WebhooksApiWebhooksRetrieveDeliveries
     */
    readonly id: number
}

/**
 * Request parameters for webhooksRetrieveEvents operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksRetrieveEventsRequest
 */
export interface WebhooksApiWebhooksRetrieveEventsRequest {
    /**
     * Type of webhook
     * @type {string}
     * @memberof WebhooksApiWebhooksRetrieveEvents
     */
    readonly type?: string
}

/**
 * Request parameters for webhooksUpdate operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksUpdateRequest
 */
export interface WebhooksApiWebhooksUpdateRequest {
    /**
     * A unique integer value identifying this webhook.
     * @type {number}
     * @memberof WebhooksApiWebhooksUpdate
     */
    readonly id: number

    /**
     * 
     * @type {WebhookWriteRequest}
     * @memberof WebhooksApiWebhooksUpdate
     */
    readonly webhookWriteRequest: WebhookWriteRequest
}

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * 
     * @summary Method creates a webhook
     * @param {WebhooksApiWebhooksCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksCreate(requestParameters: WebhooksApiWebhooksCreateRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksCreate(requestParameters.webhookWriteRequest, requestParameters.xOrganization, requestParameters.org, requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method redeliver a specific webhook delivery
     * @param {WebhooksApiWebhooksCreateDeliveriesRedeliveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksCreateDeliveriesRedelivery(requestParameters: WebhooksApiWebhooksCreateDeliveriesRedeliveryRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksCreateDeliveriesRedelivery(requestParameters.deliveryId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method send ping webhook
     * @param {WebhooksApiWebhooksCreatePingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksCreatePing(requestParameters: WebhooksApiWebhooksCreatePingRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksCreatePing(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method deletes a webhook
     * @param {WebhooksApiWebhooksDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksDestroy(requestParameters: WebhooksApiWebhooksDestroyRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns a paginated list of webhook according to query parameters
     * @param {WebhooksApiWebhooksListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksList(requestParameters: WebhooksApiWebhooksListRequest = {}, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksList(requestParameters.xOrganization, requestParameters.filter, requestParameters.org, requestParameters.orgId, requestParameters.owner, requestParameters.page, requestParameters.pageSize, requestParameters.projectId, requestParameters.search, requestParameters.sort, requestParameters.targetUrl, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method return a list of deliveries for a specific webhook
     * @param {WebhooksApiWebhooksListDeliveriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksListDeliveries(requestParameters: WebhooksApiWebhooksListDeliveriesRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksListDeliveries(requestParameters.id, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Methods does a partial update of chosen fields in a webhook
     * @param {WebhooksApiWebhooksPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksPartialUpdate(requestParameters: WebhooksApiWebhooksPartialUpdateRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksPartialUpdate(requestParameters.id, requestParameters.patchedWebhookWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method returns details of a webhook
     * @param {WebhooksApiWebhooksRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksRetrieve(requestParameters: WebhooksApiWebhooksRetrieveRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method return a specific delivery for a specific webhook
     * @param {WebhooksApiWebhooksRetrieveDeliveriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksRetrieveDeliveries(requestParameters: WebhooksApiWebhooksRetrieveDeliveriesRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksRetrieveDeliveries(requestParameters.deliveryId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method return a list of available webhook events
     * @param {WebhooksApiWebhooksRetrieveEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksRetrieveEvents(requestParameters: WebhooksApiWebhooksRetrieveEventsRequest = {}, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksRetrieveEvents(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Method updates a webhook by id
     * @param {WebhooksApiWebhooksUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksUpdate(requestParameters: WebhooksApiWebhooksUpdateRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksUpdate(requestParameters.id, requestParameters.webhookWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const WebhooksListTypeEnum = {
    Organization: 'organization',
    Project: 'project'
} as const;
export type WebhooksListTypeEnum = typeof WebhooksListTypeEnum[keyof typeof WebhooksListTypeEnum];
